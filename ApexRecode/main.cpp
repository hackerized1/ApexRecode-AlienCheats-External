#include <Windows.h>
#include "entity.h"
#include "vector.h"
#include <thread>
#include <dwmapi.h>
#include "main.h"
#include "auth.hpp"
#include "xorstr.hpp"
#include "skcrypt.h"

#define FG_RED "\033[31m"
#define FG_PURPLE "\033[35m"
#define FG_GREEN "\033[32m"
#define FG_YELLOW "\033[33m"
#define FG_WHITE "\033[0m"
#define FG_MAGENTA "\033[35m"
#define FG_CYAN    "\033[36m"
/* C:\Users\0\Desktop\qweqw\kernelmode\build\xd.sys (22.07.2022 11:42:58)
   BaþlangýçOffseti(h): 00000000, SonOffset(h): 000011FF, Uzunluk(h): 00001200 */
#include <vector>
std::vector<uint8_t> raw_image = {
	0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xD0, 0x00, 0x00, 0x00, 0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD,
	0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70,
	0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F,
	0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20,
	0x44, 0x4F, 0x53, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A,
	0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB5, 0xD8, 0x17, 0xC5,
	0xF1, 0xB9, 0x79, 0x96, 0xF1, 0xB9, 0x79, 0x96, 0xF1, 0xB9, 0x79, 0x96,
	0xE5, 0xD2, 0x7A, 0x97, 0xF0, 0xB9, 0x79, 0x96, 0xE5, 0xD2, 0x78, 0x97,
	0xF2, 0xB9, 0x79, 0x96, 0xF1, 0xB9, 0x78, 0x96, 0xEE, 0xB9, 0x79, 0x96,
	0x33, 0xCC, 0x70, 0x97, 0xF0, 0xB9, 0x79, 0x96, 0x33, 0xCC, 0x7B, 0x97,
	0xF0, 0xB9, 0x79, 0x96, 0x52, 0x69, 0x63, 0x68, 0xF1, 0xB9, 0x79, 0x96,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x50, 0x45, 0x00, 0x00, 0x64, 0x86, 0x04, 0x00,
	0x12, 0x63, 0xDA, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xF0, 0x00, 0x22, 0x20, 0x0B, 0x02, 0x0E, 0x1D, 0x00, 0x06, 0x00, 0x00,
	0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x11, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x50, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0xCF, 0x33, 0x00, 0x00,
	0x01, 0x00, 0x60, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x2C, 0x22, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
	0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x20, 0x00, 0x00,
	0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
	0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00,
	0x29, 0x05, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x60, 0x2E, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x00, 0x00, 0x06, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
	0x00, 0x06, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40,
	0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
	0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0xC0, 0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,
	0x54, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x41, 0x56, 0x48, 0x83, 0xEC, 0x60, 0x8B, 0x41,
	0x3C, 0x4C, 0x8B, 0xF1, 0x3D, 0x39, 0x05, 0x00, 0x00, 0x75, 0x38, 0x8B,
	0x49, 0x38, 0x48, 0x8D, 0x54, 0x24, 0x70, 0xFF, 0x15, 0x1F, 0x10, 0x00,
	0x00, 0x48, 0x8B, 0x4C, 0x24, 0x70, 0xFF, 0x15, 0x2C, 0x10, 0x00, 0x00,
	0x4C, 0x8D, 0x05, 0x3D, 0x10, 0x00, 0x00, 0x33, 0xD2, 0x4C, 0x8B, 0xC8,
	0x49, 0x89, 0x46, 0x40, 0x33, 0xC9, 0xFF, 0x15, 0xD4, 0x0F, 0x00, 0x00,
	0x48, 0x83, 0xC4, 0x60, 0x41, 0x5E, 0xC3, 0x48, 0x89, 0x9C, 0x24, 0x88,
	0x00, 0x00, 0x00, 0x48, 0x89, 0x6C, 0x24, 0x58, 0x48, 0x89, 0x74, 0x24,
	0x50, 0x48, 0x89, 0x7C, 0x24, 0x48, 0x4C, 0x89, 0x7C, 0x24, 0x40, 0x3D,
	0x38, 0x05, 0x00, 0x00, 0x75, 0x62, 0x48, 0x8B, 0x79, 0x20, 0x4C, 0x8D,
	0x79, 0x28, 0x48, 0x8B, 0x71, 0x30, 0x48, 0x8D, 0x54, 0x24, 0x70, 0x48,
	0x8B, 0x69, 0x08, 0x8B, 0x59, 0x38, 0x8B, 0x49, 0x10, 0xFF, 0x15, 0xB1,
	0x0F, 0x00, 0x00, 0x8B, 0xCB, 0x48, 0x8D, 0x54, 0x24, 0x78, 0xFF, 0x15,
	0xA4, 0x0F, 0x00, 0x00, 0x4C, 0x8B, 0x44, 0x24, 0x70, 0x48, 0x8D, 0x84,
	0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x4C, 0x24, 0x78, 0x4C, 0x8B,
	0xCE, 0x48, 0x89, 0x44, 0x24, 0x30, 0x48, 0x8B, 0xD5, 0xC6, 0x44, 0x24,
	0x28, 0x01, 0x48, 0x89, 0x7C, 0x24, 0x20, 0xFF, 0x15, 0x6F, 0x0F, 0x00,
	0x00, 0x85, 0xC0, 0xE9, 0x80, 0x00, 0x00, 0x00, 0x3D, 0x37, 0x05, 0x00,
	0x00, 0x0F, 0x85, 0x87, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x71, 0x20, 0x4C,
	0x8D, 0x79, 0x28, 0x48, 0x8B, 0x69, 0x30, 0x48, 0x8D, 0x54, 0x24, 0x70,
	0x48, 0x8B, 0x79, 0x08, 0x8B, 0x59, 0x38, 0x8B, 0x49, 0x10, 0xFF, 0x15,
	0x44, 0x0F, 0x00, 0x00, 0x8B, 0xCB, 0x48, 0x8D, 0x54, 0x24, 0x78, 0xFF,
	0x15, 0x37, 0x0F, 0x00, 0x00, 0x4C, 0x8B, 0x44, 0x24, 0x78, 0x48, 0x8D,
	0x84, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x4C, 0x24, 0x70, 0x4C,
	0x8B, 0xCF, 0x48, 0x89, 0x44, 0x24, 0x30, 0x48, 0x8B, 0xD5, 0xC6, 0x44,
	0x24, 0x28, 0x01, 0x48, 0x89, 0x74, 0x24, 0x20, 0xFF, 0x15, 0x02, 0x0F,
	0x00, 0x00, 0x48, 0x8B, 0x4C, 0x24, 0x70, 0x8B, 0xD8, 0xFF, 0x15, 0xE5,
	0x0E, 0x00, 0x00, 0x48, 0x8B, 0x4C, 0x24, 0x78, 0xFF, 0x15, 0xDA, 0x0E,
	0x00, 0x00, 0x85, 0xDB, 0x78, 0x10, 0x4D, 0x85, 0xFF, 0x74, 0x0B, 0x48,
	0x8B, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00, 0x49, 0x89, 0x07, 0x48, 0x8B,
	0x7C, 0x24, 0x48, 0x48, 0x8B, 0x74, 0x24, 0x50, 0x48, 0x8B, 0x6C, 0x24,
	0x58, 0x48, 0x8B, 0x9C, 0x24, 0x88, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0x7C,
	0x24, 0x40, 0x48, 0x83, 0xC4, 0x60, 0x41, 0x5E, 0xC3, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x40, 0x53, 0x48, 0x81,
	0xEC, 0x80, 0x01, 0x00, 0x00, 0x4C, 0x8D, 0x05, 0xE8, 0x0E, 0x00, 0x00,
	0x33, 0xD2, 0x33, 0xC9, 0xFF, 0x15, 0x6E, 0x0E, 0x00, 0x00, 0x48, 0x8D,
	0x15, 0xF7, 0x0E, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x30, 0xFF, 0x15,
	0x74, 0x0E, 0x00, 0x00, 0x41, 0xB0, 0x01, 0x48, 0x8D, 0x54, 0x24, 0x30,
	0x48, 0x8D, 0x4C, 0x24, 0x20, 0xFF, 0x15, 0x79, 0x0E, 0x00, 0x00, 0x33,
	0xDB, 0x4C, 0x8D, 0x8C, 0x24, 0x90, 0x01, 0x00, 0x00, 0x45, 0x33, 0xC0,
	0x89, 0x9C, 0x24, 0x90, 0x01, 0x00, 0x00, 0x33, 0xD2, 0x8D, 0x4B, 0x0B,
	0xFF, 0x15, 0x22, 0x0E, 0x00, 0x00, 0x8B, 0x84, 0x24, 0x90, 0x01, 0x00,
	0x00, 0x85, 0xC0, 0x75, 0x10, 0x48, 0x8D, 0x4C, 0x24, 0x20, 0xFF, 0x15,
	0xFC, 0x0D, 0x00, 0x00, 0xE9, 0xD7, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xD0,
	0x48, 0x89, 0xB4, 0x24, 0x98, 0x01, 0x00, 0x00, 0x33, 0xC9, 0xFF, 0x15,
	0xEC, 0x0D, 0x00, 0x00, 0x48, 0x8B, 0xF0, 0x48, 0x85, 0xC0, 0x75, 0x10,
	0x48, 0x8D, 0x4C, 0x24, 0x20, 0xFF, 0x15, 0xD1, 0x0D, 0x00, 0x00, 0xE9,
	0xA4, 0x01, 0x00, 0x00, 0x44, 0x8B, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00,
	0x33, 0xD2, 0x48, 0x8B, 0xCE, 0xE8, 0xFA, 0x01, 0x00, 0x00, 0x44, 0x8B,
	0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4C, 0x8D, 0x8C, 0x24, 0x90, 0x01,
	0x00, 0x00, 0x48, 0x8B, 0xD6, 0xB9, 0x0B, 0x00, 0x00, 0x00, 0xFF, 0x15,
	0xAC, 0x0D, 0x00, 0x00, 0x85, 0xC0, 0x79, 0x1B, 0x48, 0x8D, 0x4C, 0x24,
	0x20, 0xFF, 0x15, 0x8D, 0x0D, 0x00, 0x00, 0x33, 0xD2, 0x48, 0x8B, 0xCE,
	0xFF, 0x15, 0xE2, 0x0D, 0x00, 0x00, 0xE9, 0x55, 0x01, 0x00, 0x00, 0x48,
	0x89, 0xBC, 0x24, 0xA0, 0x01, 0x00, 0x00, 0x8B, 0xFB, 0x39, 0x1E, 0x0F,
	0x86, 0x25, 0x01, 0x00, 0x00, 0x48, 0x85, 0xDB, 0x0F, 0x85, 0x1C, 0x01,
	0x00, 0x00, 0x8B, 0xC7, 0x8D, 0x53, 0x02, 0x48, 0x69, 0xC8, 0x28, 0x01,
	0x00, 0x00, 0x48, 0x8D, 0x46, 0x08, 0x48, 0x03, 0xC1, 0x48, 0x8D, 0x4C,
	0x24, 0x50, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x48, 0x8D, 0x89, 0x80, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x00, 0x0F, 0x10,
	0x48, 0x10, 0x48, 0x8D, 0x80, 0x80, 0x00, 0x00, 0x00, 0x0F, 0x11, 0x41,
	0x80, 0x0F, 0x10, 0x40, 0xA0, 0x0F, 0x11, 0x49, 0x90, 0x0F, 0x10, 0x48,
	0xB0, 0x0F, 0x11, 0x41, 0xA0, 0x0F, 0x10, 0x40, 0xC0, 0x0F, 0x11, 0x49,
	0xB0, 0x0F, 0x10, 0x48, 0xD0, 0x0F, 0x11, 0x41, 0xC0, 0x0F, 0x10, 0x40,
	0xE0, 0x0F, 0x11, 0x49, 0xD0, 0x0F, 0x10, 0x48, 0xF0, 0x0F, 0x11, 0x41,
	0xE0, 0x0F, 0x11, 0x49, 0xF0, 0x48, 0x83, 0xEA, 0x01, 0x75, 0xAD, 0x0F,
	0x10, 0x00, 0x48, 0x8D, 0x54, 0x24, 0x78, 0x0F, 0x10, 0x48, 0x10, 0x48,
	0x8B, 0x40, 0x20, 0x0F, 0x11, 0x01, 0x0F, 0x11, 0x49, 0x10, 0x48, 0x89,
	0x41, 0x20, 0x48, 0x8D, 0x4C, 0x24, 0x78, 0x48, 0xC7, 0xC0, 0xFF, 0xFF,
	0xFF, 0xFF, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0x48, 0xFF, 0xC0, 0x80,
	0x3C, 0x01, 0x00, 0x75, 0xF7, 0x48, 0x85, 0xC0, 0x74, 0x62, 0x0F, 0xB6,
	0x4C, 0x24, 0x78, 0xB8, 0xFF, 0xFF, 0xFF, 0xFF, 0x84, 0xC9, 0x74, 0x2E,
	0x0F, 0x1F, 0x40, 0x00, 0x80, 0xF9, 0x5C, 0x75, 0x0B, 0x48, 0x8D, 0x4C,
	0x24, 0x78, 0x8B, 0xC2, 0x2B, 0xC1, 0xFF, 0xC0, 0x0F, 0xB6, 0x4A, 0x01,
	0x48, 0xFF, 0xC2, 0x84, 0xC9, 0x75, 0xE5, 0x85, 0xC0, 0x78, 0x0B, 0x48,
	0x63, 0xC8, 0x48, 0x8D, 0x54, 0x24, 0x78, 0x48, 0x03, 0xD1, 0x48, 0x8D,
	0x4C, 0x24, 0x40, 0xFF, 0x15, 0xBB, 0x0C, 0x00, 0x00, 0x41, 0xB0, 0x01,
	0x48, 0x8D, 0x54, 0x24, 0x20, 0x48, 0x8D, 0x4C, 0x24, 0x40, 0xFF, 0x15,
	0x78, 0x0C, 0x00, 0x00, 0x84, 0xC0, 0x48, 0x0F, 0x45, 0x5C, 0x24, 0x60,
	0xFF, 0xC7, 0x3B, 0x3E, 0x0F, 0x82, 0xDB, 0xFE, 0xFF, 0xFF, 0x48, 0x8D,
	0x4C, 0x24, 0x20, 0xFF, 0x15, 0x3B, 0x0C, 0x00, 0x00, 0x33, 0xD2, 0x48,
	0x8B, 0xCE, 0xFF, 0x15, 0x90, 0x0C, 0x00, 0x00, 0x48, 0x8B, 0xBC, 0x24,
	0xA0, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xB4, 0x24, 0x98, 0x01, 0x00, 0x00,
	0x4C, 0x8B, 0xCB, 0x4C, 0x8D, 0x05, 0xD6, 0x0C, 0x00, 0x00, 0x33, 0xD2,
	0x33, 0xC9, 0xFF, 0x15, 0x24, 0x0C, 0x00, 0x00, 0x4C, 0x8D, 0x8B, 0xB8,
	0x5A, 0x06, 0x00, 0x33, 0xD2, 0x4C, 0x8D, 0x05, 0xD4, 0x0C, 0x00, 0x00,
	0x4C, 0x89, 0x0D, 0xFD, 0x1B, 0x00, 0x00, 0x33, 0xC9, 0xFF, 0x15, 0x05,
	0x0C, 0x00, 0x00, 0x48, 0x8B, 0x05, 0xEE, 0x1B, 0x00, 0x00, 0x48, 0x8D,
	0x0D, 0xDF, 0xFB, 0xFF, 0xFF, 0x48, 0x89, 0x08, 0x33, 0xC0, 0x48, 0x81,
	0xC4, 0x80, 0x01, 0x00, 0x00, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0x48, 0x8B, 0xC1, 0x49, 0x83, 0xF8, 0x08, 0x72, 0x47, 0x0F, 0xB6, 0xD2,
	0x49, 0xB9, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x49, 0x0F,
	0xAF, 0xD1, 0x49, 0x83, 0xF8, 0x4F, 0x73, 0x50, 0x4D, 0x8B, 0xC8, 0x49,
	0x83, 0xE1, 0xF8, 0x49, 0x03, 0xC9, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00,
	0x4A, 0x89, 0x54, 0x08, 0xF8, 0x49, 0x83, 0xE9, 0x08, 0x75, 0xF5, 0x49,
	0x83, 0xE0, 0x07, 0x74, 0x05, 0x4A, 0x89, 0x54, 0x01, 0xF8, 0xC3, 0x66,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xE0, 0x07,
	0x74, 0x0A, 0x42, 0x88, 0x54, 0x00, 0xFF, 0x49, 0xFF, 0xC8, 0x75, 0xF6,
	0xC3, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x0F, 0x1F, 0x84, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x66, 0x48, 0x0F, 0x6E, 0xC2, 0x0F, 0x16, 0xC0,
	0x0F, 0x11, 0x01, 0x4C, 0x03, 0xC1, 0x48, 0x83, 0xC1, 0x10, 0x48, 0x83,
	0xE1, 0xF0, 0x4C, 0x2B, 0xC1, 0x4D, 0x8B, 0xC8, 0x49, 0xC1, 0xE9, 0x07,
	0x74, 0x2F, 0x0F, 0x29, 0x01, 0x0F, 0x29, 0x41, 0x10, 0x48, 0x81, 0xC1,
	0x80, 0x00, 0x00, 0x00, 0x0F, 0x29, 0x41, 0xA0, 0x0F, 0x29, 0x41, 0xB0,
	0x49, 0xFF, 0xC9, 0x0F, 0x29, 0x41, 0xC0, 0x0F, 0x29, 0x41, 0xD0, 0x0F,
	0x29, 0x41, 0xE0, 0x0F, 0x29, 0x41, 0xF0, 0x75, 0xD5, 0x49, 0x83, 0xE0,
	0x7F, 0x4D, 0x8B, 0xC8, 0x49, 0xC1, 0xE9, 0x04, 0x74, 0x12, 0x66, 0x0F,
	0x1F, 0x44, 0x00, 0x00, 0x0F, 0x11, 0x01, 0x48, 0x83, 0xC1, 0x10, 0x49,
	0xFF, 0xC9, 0x75, 0xF4, 0x49, 0x83, 0xE0, 0x0F, 0x74, 0x06, 0x42, 0x0F,
	0x11, 0x44, 0x01, 0xF0, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xC8, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xDC, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x22, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0A, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x18, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x23, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x42, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x5A, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x23, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x8E, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xAE, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x23, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xE4, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x3E, 0x5D, 0x20,
	0x62, 0x61, 0x73, 0x65, 0x61, 0x64, 0x64, 0x72, 0x3A, 0x20, 0x25, 0x70,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x3E, 0x5D, 0x20,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5F, 0x65, 0x6E, 0x74, 0x72, 0x79,
	0x20, 0x63, 0x61, 0x6C, 0x6C, 0x65, 0x64, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x33, 0x00,
	0x32, 0x00, 0x6B, 0x00, 0x2E, 0x00, 0x73, 0x00, 0x79, 0x00, 0x73, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x5B, 0x3E, 0x5D, 0x20, 0x77, 0x69, 0x6E, 0x33,
	0x32, 0x6B, 0x20, 0x62, 0x61, 0x73, 0x65, 0x20, 0x2D, 0x3E, 0x20, 0x30,
	0x78, 0x25, 0x78, 0x00, 0x5B, 0x3E, 0x5D, 0x20, 0x68, 0x6F, 0x6F, 0x6B,
	0x20, 0x61, 0x64, 0x64, 0x72, 0x20, 0x2D, 0x3E, 0x20, 0x30, 0x78, 0x25,
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x63, 0xDA, 0x62,
	0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00,
	0x48, 0x21, 0x00, 0x00, 0x48, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x12, 0x63, 0xDA, 0x62, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
	0x14, 0x00, 0x00, 0x00, 0xA0, 0x21, 0x00, 0x00, 0xA0, 0x0B, 0x00, 0x00,
	0x18, 0x00, 0x00, 0x00, 0x02, 0x80, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x40, 0x21, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x52, 0x53, 0x44, 0x53,
	0x46, 0x99, 0x87, 0x22, 0xBD, 0xDF, 0xD4, 0x44, 0x8F, 0x9A, 0x8F, 0xA8,
	0x3D, 0x36, 0x1B, 0xE3, 0x09, 0x00, 0x00, 0x00, 0x43, 0x3A, 0x5C, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x5C, 0x30, 0x5C, 0x44, 0x65, 0x73, 0x6B, 0x74,
	0x6F, 0x70, 0x5C, 0x71, 0x77, 0x65, 0x71, 0x77, 0x5C, 0x6B, 0x65, 0x72,
	0x6E, 0x65, 0x6C, 0x6D, 0x6F, 0x64, 0x65, 0x5C, 0x62, 0x75, 0x69, 0x6C,
	0x64, 0x5C, 0x64, 0x61, 0x74, 0x61, 0x70, 0x74, 0x72, 0x5F, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2E, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x67, 0x0C, 0x00, 0x67, 0xF4, 0x08, 0x00, 0x62, 0x74, 0x09, 0x00,
	0x5D, 0x64, 0x0A, 0x00, 0x58, 0x54, 0x0B, 0x00, 0x53, 0x34, 0x11, 0x00,
	0x06, 0xB2, 0x02, 0xE0, 0x01, 0x09, 0x03, 0x00, 0x09, 0x01, 0x30, 0x00,
	0x02, 0x30, 0x00, 0x00, 0x21, 0x08, 0x02, 0x00, 0x08, 0x64, 0x33, 0x00,
	0x90, 0x11, 0x00, 0x00, 0x0C, 0x12, 0x00, 0x00, 0xD4, 0x21, 0x00, 0x00,
	0x21, 0x08, 0x02, 0x00, 0x08, 0x74, 0x34, 0x00, 0x0C, 0x12, 0x00, 0x00,
	0x83, 0x12, 0x00, 0x00, 0xE0, 0x21, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
	0x0C, 0x12, 0x00, 0x00, 0x83, 0x12, 0x00, 0x00, 0xE0, 0x21, 0x00, 0x00,
	0x21, 0x00, 0x00, 0x00, 0x90, 0x11, 0x00, 0x00, 0x0C, 0x12, 0x00, 0x00,
	0xD4, 0x21, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, 0x22, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x23, 0x00, 0x00,
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xC8, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xDC, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x22, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0A, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x18, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x23, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x42, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x5A, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x23, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x8E, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xAE, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x23, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xE4, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x08, 0x52, 0x74,
	0x6C, 0x46, 0x72, 0x65, 0x65, 0x41, 0x6E, 0x73, 0x69, 0x53, 0x74, 0x72,
	0x69, 0x6E, 0x67, 0x00, 0x9E, 0x00, 0x45, 0x78, 0x41, 0x6C, 0x6C, 0x6F,
	0x63, 0x61, 0x74, 0x65, 0x50, 0x6F, 0x6F, 0x6C, 0x00, 0x00, 0x14, 0x0B,
	0x5A, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6D, 0x49, 0x6E, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E,
	0x00, 0x00, 0x5E, 0x00, 0x44, 0x62, 0x67, 0x50, 0x72, 0x69, 0x6E, 0x74,
	0x45, 0x78, 0x00, 0x00, 0x12, 0x08, 0x52, 0x74, 0x6C, 0x45, 0x71, 0x75,
	0x61, 0x6C, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x00, 0x73, 0x06,
	0x4F, 0x62, 0x66, 0x44, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6E,
	0x63, 0x65, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x00, 0x00, 0x7F, 0x08,
	0x52, 0x74, 0x6C, 0x49, 0x6E, 0x69, 0x74, 0x55, 0x6E, 0x69, 0x63, 0x6F,
	0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x00, 0x6C, 0x05,
	0x4D, 0x6D, 0x43, 0x6F, 0x70, 0x79, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6C, 0x4D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x00, 0x4F, 0x07, 0x50, 0x73,
	0x4C, 0x6F, 0x6F, 0x6B, 0x75, 0x70, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x79, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x00, 0x00, 0x5A, 0x09, 0x52, 0x74, 0x6C, 0x55, 0x6E, 0x69, 0x63, 0x6F,
	0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x54, 0x6F, 0x41, 0x6E,
	0x73, 0x69, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x00, 0x76, 0x08,
	0x52, 0x74, 0x6C, 0x49, 0x6E, 0x69, 0x74, 0x41, 0x6E, 0x73, 0x69, 0x53,
	0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x17, 0x07, 0x50, 0x73, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6F, 0x6E, 0x42, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x00, 0x00, 0xCA, 0x00, 0x45, 0x78, 0x46, 0x72, 0x65, 0x65,
	0x50, 0x6F, 0x6F, 0x6C, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x67, 0x00,
	0x6E, 0x74, 0x6F, 0x73, 0x6B, 0x72, 0x6E, 0x6C, 0x2E, 0x65, 0x78, 0x65,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x85, 0x11, 0x00, 0x00,
	0xB8, 0x21, 0x00, 0x00, 0x90, 0x11, 0x00, 0x00, 0x0C, 0x12, 0x00, 0x00,
	0xD4, 0x21, 0x00, 0x00, 0x0C, 0x12, 0x00, 0x00, 0x83, 0x12, 0x00, 0x00,
	0xE0, 0x21, 0x00, 0x00, 0x83, 0x12, 0x00, 0x00, 0xD8, 0x13, 0x00, 0x00,
	0xF4, 0x21, 0x00, 0x00, 0xD8, 0x13, 0x00, 0x00, 0xE0, 0x13, 0x00, 0x00,
	0x08, 0x22, 0x00, 0x00, 0xE0, 0x13, 0x00, 0x00, 0x2F, 0x14, 0x00, 0x00,
	0x18, 0x22, 0x00, 0x00, 0x40, 0x14, 0x00, 0x00, 0x29, 0x15, 0x00, 0x00,
	0x28, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

std::vector<uint8_t> spoofer = {
	0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xD0, 0x00, 0x00, 0x00, 0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD,
	0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70,
	0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F,
	0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20,
	0x44, 0x4F, 0x53, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A,
	0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAB, 0x44, 0x16, 0xCB,
	0xEF, 0x25, 0x78, 0x98, 0xEF, 0x25, 0x78, 0x98, 0xEF, 0x25, 0x78, 0x98,
	0xFB, 0x4E, 0x7B, 0x99, 0xEE, 0x25, 0x78, 0x98, 0xFB, 0x4E, 0x79, 0x99,
	0xEC, 0x25, 0x78, 0x98, 0xEF, 0x25, 0x79, 0x98, 0xF8, 0x25, 0x78, 0x98,
	0x2E, 0x50, 0x7C, 0x99, 0xED, 0x25, 0x78, 0x98, 0x2E, 0x50, 0x7A, 0x99,
	0xEE, 0x25, 0x78, 0x98, 0x52, 0x69, 0x63, 0x68, 0xEF, 0x25, 0x78, 0x98,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x50, 0x45, 0x00, 0x00, 0x64, 0x86, 0x05, 0x00,
	0x9D, 0x9F, 0xE1, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xF0, 0x00, 0x22, 0x00, 0x0B, 0x02, 0x0E, 0x1D, 0x00, 0x18, 0x00, 0x00,
	0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x11, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,
	0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xA0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x9C, 0xA5, 0x00, 0x00,
	0x01, 0x00, 0x60, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
	0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x30, 0x00, 0x00,
	0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
	0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00,
	0x82, 0x16, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x68, 0x2E, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x00, 0x00, 0x9C, 0x03, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
	0x00, 0x04, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x48,
	0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x48, 0x30, 0x00, 0x00,
	0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0xC8, 0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,
	0x38, 0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x48, 0x49, 0x4E, 0x49, 0x54,
	0x00, 0x00, 0x00, 0x00, 0xD2, 0x02, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00,
	0x00, 0x04, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xCA,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xC4, 0x48, 0x89, 0x58, 0x08, 0x57,
	0x48, 0x83, 0xEC, 0x50, 0x48, 0x8B, 0xDA, 0x48, 0x8B, 0xF9, 0x4D, 0x85,
	0xC0, 0x74, 0x75, 0x41, 0x0F, 0x10, 0x00, 0x33, 0xD2, 0x49, 0x8B, 0xC8,
	0x0F, 0x11, 0x40, 0xC8, 0x0F, 0x11, 0x40, 0xD8, 0x41, 0x0F, 0x10, 0x40,
	0x10, 0x0F, 0x11, 0x40, 0xE8, 0xFF, 0x15, 0xE9, 0x1F, 0x00, 0x00, 0x0F,
	0x10, 0x44, 0x24, 0x20, 0x66, 0x0F, 0x73, 0xD8, 0x08, 0x66, 0x0F, 0x7E,
	0xC2, 0x83, 0xFA, 0x38, 0x72, 0x23, 0x48, 0x8B, 0x4C, 0x24, 0x30, 0x8B,
	0x41, 0x18, 0x85, 0xC0, 0x74, 0x17, 0x3B, 0xC2, 0x73, 0x13, 0x48, 0x83,
	0xC1, 0x14, 0x48, 0x8D, 0x15, 0xC3, 0x3F, 0x00, 0x00, 0x48, 0x03, 0xC8,
	0xE8, 0x67, 0x12, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x48, 0x48, 0x85,
	0xC0, 0x74, 0x15, 0x80, 0x7B, 0x42, 0x01, 0x7E, 0x0F, 0x4C, 0x8B, 0x44,
	0x24, 0x40, 0x48, 0x8B, 0xD3, 0x48, 0x8B, 0xCF, 0xFF, 0xD0, 0xEB, 0x02,
	0x33, 0xC0, 0x48, 0x8B, 0x5C, 0x24, 0x60, 0x48, 0x83, 0xC4, 0x50, 0x5F,
	0xC3, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83,
	0xEC, 0x20, 0x48, 0x8B, 0xF9, 0x48, 0x8B, 0xDA, 0x48, 0x8B, 0x8A, 0xB8,
	0x00, 0x00, 0x00, 0x8B, 0x41, 0x18, 0x3D, 0x2C, 0xD0, 0x04, 0x00, 0x74,
	0x29, 0x3D, 0x88, 0xC0, 0x07, 0x00, 0x74, 0x19, 0x3D, 0x00, 0x14, 0x2D,
	0x00, 0x75, 0x27, 0x48, 0x8B, 0x42, 0x18, 0x83, 0x38, 0x00, 0x75, 0x1E,
	0x4C, 0x8D, 0x05, 0x01, 0x0C, 0x00, 0x00, 0xEB, 0x10, 0x4C, 0x8D, 0x05,
	0x24, 0x04, 0x00, 0x00, 0xEB, 0x07, 0x4C, 0x8D, 0x05, 0x13, 0xFF, 0xFF,
	0xFF, 0xE8, 0x72, 0x0D, 0x00, 0x00, 0x48, 0x8B, 0xD3, 0x48, 0x8B, 0xCF,
	0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0x48, 0xFF,
	0x25, 0xEF, 0x3E, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x48, 0x8D, 0x15, 0x09,
	0x00, 0x00, 0x00, 0x33, 0xC9, 0xE9, 0x3F, 0x12, 0x00, 0x00, 0xCC, 0xCC,
	0x48, 0x83, 0xEC, 0x28, 0x48, 0xB8, 0x14, 0x00, 0x00, 0x00, 0x80, 0xF7,
	0xFF, 0xFF, 0x48, 0x8B, 0x00, 0x89, 0x05, 0xED, 0x3E, 0x00, 0x00, 0xE8,
	0x5C, 0x04, 0x00, 0x00, 0xE8, 0xEB, 0x0A, 0x00, 0x00, 0xE8, 0x7A, 0x07,
	0x00, 0x00, 0xE8, 0x61, 0x0A, 0x00, 0x00, 0xE8, 0xBC, 0x06, 0x00, 0x00,
	0x33, 0xC0, 0x48, 0x83, 0xC4, 0x28, 0xC3, 0xCC, 0x48, 0x89, 0x5C, 0x24,
	0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0x82, 0xB8, 0x00, 0x00,
	0x00, 0x48, 0x8B, 0xDA, 0x81, 0x78, 0x18, 0x08, 0x00, 0xDE, 0x08, 0x74,
	0x08, 0xFF, 0x15, 0xA1, 0x3E, 0x00, 0x00, 0xEB, 0x4B, 0xFF, 0x15, 0x99,
	0x3E, 0x00, 0x00, 0x48, 0x8B, 0x5B, 0x70, 0x8B, 0xF8, 0x48, 0x85, 0xDB,
	0x74, 0x38, 0xBA, 0x00, 0x02, 0x00, 0x00, 0x48, 0x8B, 0xCB, 0xE8, 0x65,
	0x10, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x26, 0x33, 0xD2, 0x81, 0x3C,
	0x02, 0x47, 0x50, 0x55, 0x2D, 0x74, 0x0C, 0xFF, 0xC2, 0x81, 0xFA, 0xFC,
	0x01, 0x00, 0x00, 0x72, 0xED, 0xEB, 0x04, 0xC6, 0x04, 0x1A, 0x00, 0x33,
	0xD2, 0x48, 0x8B, 0xC8, 0xFF, 0x15, 0x5E, 0x1E, 0x00, 0x00, 0x8B, 0xC7,
	0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0xCC,
	0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B,
	0xF9, 0x48, 0x8B, 0xDA, 0x48, 0x8B, 0x8A, 0xB8, 0x00, 0x00, 0x00, 0x8B,
	0x41, 0x18, 0x3D, 0x00, 0x00, 0x4D, 0x00, 0x74, 0x10, 0x3D, 0x08, 0x00,
	0x6D, 0x00, 0x75, 0x15, 0x4C, 0x8D, 0x05, 0x25, 0x00, 0x00, 0x00, 0xEB,
	0x07, 0x4C, 0x8D, 0x05, 0xD4, 0x00, 0x00, 0x00, 0xE8, 0x57, 0x0C, 0x00,
	0x00, 0x48, 0x8B, 0xD3, 0x48, 0x8B, 0xCF, 0x48, 0x8B, 0x5C, 0x24, 0x30,
	0x48, 0x83, 0xC4, 0x20, 0x5F, 0x48, 0xFF, 0x25, 0xDC, 0x3D, 0x00, 0x00,
	0x48, 0x8B, 0xC4, 0x48, 0x89, 0x58, 0x08, 0x48, 0x89, 0x70, 0x10, 0x57,
	0x48, 0x83, 0xEC, 0x50, 0x33, 0xF6, 0x48, 0x8B, 0xDA, 0x48, 0x8B, 0xF9,
	0x4D, 0x85, 0xC0, 0x0F, 0x84, 0x85, 0x00, 0x00, 0x00, 0x41, 0x0F, 0x10,
	0x00, 0x33, 0xD2, 0x49, 0x8B, 0xC8, 0x0F, 0x11, 0x40, 0xC8, 0x0F, 0x11,
	0x40, 0xD8, 0x41, 0x0F, 0x10, 0x40, 0x10, 0x0F, 0x11, 0x40, 0xE8, 0xFF,
	0x15, 0xBB, 0x1D, 0x00, 0x00, 0x0F, 0x10, 0x44, 0x24, 0x20, 0x66, 0x0F,
	0x73, 0xD8, 0x08, 0x66, 0x0F, 0x7E, 0xC0, 0x83, 0xF8, 0x20, 0x72, 0x33,
	0x48, 0x8B, 0x4C, 0x24, 0x30, 0x8B, 0xD6, 0x39, 0x71, 0x04, 0x76, 0x27,
	0x8B, 0xC2, 0x4C, 0x8D, 0x04, 0x40, 0x42, 0x39, 0x74, 0xC1, 0x10, 0x74,
	0x06, 0x66, 0x42, 0x89, 0x74, 0xC1, 0x14, 0x42, 0x39, 0x74, 0xC1, 0x08,
	0x74, 0x06, 0x66, 0x42, 0x89, 0x74, 0xC1, 0x0C, 0xFF, 0xC2, 0x3B, 0x51,
	0x04, 0x72, 0xD9, 0x48, 0x8B, 0x44, 0x24, 0x48, 0x48, 0x85, 0xC0, 0x74,
	0x15, 0x80, 0x7B, 0x42, 0x01, 0x7E, 0x0F, 0x4C, 0x8B, 0x44, 0x24, 0x40,
	0x48, 0x8B, 0xD3, 0x48, 0x8B, 0xCF, 0xFF, 0xD0, 0xEB, 0x02, 0x33, 0xC0,
	0x48, 0x8B, 0x5C, 0x24, 0x60, 0x48, 0x8B, 0x74, 0x24, 0x68, 0x48, 0x83,
	0xC4, 0x50, 0x5F, 0xC3, 0x48, 0x8B, 0xC4, 0x48, 0x89, 0x58, 0x08, 0x48,
	0x89, 0x70, 0x10, 0x57, 0x48, 0x83, 0xEC, 0x50, 0x33, 0xF6, 0x48, 0x8B,
	0xDA, 0x48, 0x8B, 0xF9, 0x4D, 0x85, 0xC0, 0x74, 0x5A, 0x41, 0x0F, 0x10,
	0x00, 0x33, 0xD2, 0x49, 0x8B, 0xC8, 0x0F, 0x11, 0x40, 0xC8, 0x0F, 0x11,
	0x40, 0xD8, 0x41, 0x0F, 0x10, 0x40, 0x10, 0x0F, 0x11, 0x40, 0xE8, 0xFF,
	0x15, 0x07, 0x1D, 0x00, 0x00, 0x0F, 0x10, 0x44, 0x24, 0x20, 0x66, 0x0F,
	0x73, 0xD8, 0x08, 0x66, 0x0F, 0x7E, 0xC0, 0x83, 0xF8, 0x04, 0x72, 0x08,
	0x48, 0x8B, 0x44, 0x24, 0x30, 0x66, 0x89, 0x30, 0x48, 0x8B, 0x44, 0x24,
	0x48, 0x48, 0x85, 0xC0, 0x74, 0x15, 0x80, 0x7B, 0x42, 0x01, 0x7E, 0x0F,
	0x4C, 0x8B, 0x44, 0x24, 0x40, 0x48, 0x8B, 0xD3, 0x48, 0x8B, 0xCF, 0xFF,
	0xD0, 0xEB, 0x02, 0x33, 0xC0, 0x48, 0x8B, 0x5C, 0x24, 0x60, 0x48, 0x8B,
	0x74, 0x24, 0x68, 0x48, 0x83, 0xC4, 0x50, 0x5F, 0xC3, 0xCC, 0xCC, 0xCC,
	0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x6C, 0x24, 0x10, 0x48, 0x89,
	0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0xDA, 0x45,
	0x33, 0xC0, 0x8B, 0x15, 0x78, 0x2C, 0x00, 0x00, 0x48, 0x8B, 0xF1, 0x85,
	0xD2, 0x74, 0x2A, 0x41, 0x8B, 0xF8, 0x48, 0x8D, 0x2D, 0x6F, 0x2C, 0x00,
	0x00, 0x48, 0x03, 0xFF, 0x4C, 0x8B, 0x4C, 0xFD, 0x08, 0x4D, 0x85, 0xC9,
	0x74, 0x0B, 0x48, 0x8B, 0x41, 0x08, 0x48, 0x39, 0x44, 0xFD, 0x00, 0x74,
	0x1F, 0x41, 0xFF, 0xC0, 0x44, 0x3B, 0xC2, 0x72, 0xD6, 0x33, 0xC0, 0x48,
	0x8B, 0x5C, 0x24, 0x30, 0x48, 0x8B, 0x6C, 0x24, 0x38, 0x48, 0x8B, 0x74,
	0x24, 0x40, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0x48, 0x8B, 0x8B, 0xB8,
	0x00, 0x00, 0x00, 0x81, 0x79, 0x18, 0x02, 0x00, 0x17, 0x00, 0x75, 0x34,
	0x48, 0x8B, 0x43, 0x18, 0x8B, 0x10, 0x81, 0xEA, 0x01, 0x01, 0x01, 0x01,
	0x74, 0x12, 0x83, 0xEA, 0x01, 0x74, 0x0D, 0x81, 0xEA, 0xFF, 0xFF, 0xFF,
	0x00, 0x74, 0x05, 0x83, 0xFA, 0x01, 0x75, 0x14, 0x4C, 0x8D, 0x05, 0x19,
	0x00, 0x00, 0x00, 0x48, 0x8B, 0xD3, 0xE8, 0x55, 0x0A, 0x00, 0x00, 0x4C,
	0x8B, 0x4C, 0xFD, 0x08, 0x48, 0x8B, 0xD3, 0x48, 0x8B, 0xCE, 0x41, 0xFF,
	0xD1, 0xEB, 0x9C, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83,
	0xEC, 0x40, 0x48, 0x8B, 0xDA, 0x48, 0x8B, 0xF9, 0x4D, 0x85, 0xC0, 0x74,
	0x65, 0x41, 0x0F, 0x10, 0x48, 0x10, 0x33, 0xD2, 0x49, 0x8B, 0xC8, 0x0F,
	0x11, 0x4C, 0x24, 0x30, 0xFF, 0x15, 0xD6, 0x1B, 0x00, 0x00, 0x48, 0x8B,
	0x4B, 0x08, 0x48, 0x85, 0xC9, 0x74, 0x28, 0xF6, 0x41, 0x0A, 0x05, 0x74,
	0x06, 0x48, 0x8B, 0x41, 0x18, 0xEB, 0x08, 0x33, 0xD2, 0xFF, 0x15, 0xC1,
	0x1B, 0x00, 0x00, 0x8B, 0x0D, 0xB3, 0x3B, 0x00, 0x00, 0x41, 0xB8, 0x06,
	0x00, 0x00, 0x00, 0x48, 0x8B, 0xD0, 0xE8, 0x01, 0x0E, 0x00, 0x00, 0x48,
	0x8B, 0x44, 0x24, 0x38, 0x48, 0x85, 0xC0, 0x74, 0x15, 0x80, 0x7B, 0x42,
	0x01, 0x7E, 0x0F, 0x4C, 0x8B, 0x44, 0x24, 0x30, 0x48, 0x8B, 0xD3, 0x48,
	0x8B, 0xCF, 0xFF, 0xD0, 0xEB, 0x02, 0x33, 0xC0, 0x48, 0x8B, 0x5C, 0x24,
	0x50, 0x48, 0x83, 0xC4, 0x40, 0x5F, 0xC3, 0xCC, 0x48, 0x89, 0x5C, 0x24,
	0x08, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48,
	0x8B, 0x82, 0xB8, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xDA, 0x81, 0x78, 0x18,
	0x1B, 0x00, 0x12, 0x00, 0x74, 0x08, 0xFF, 0x15, 0x40, 0x3B, 0x00, 0x00,
	0xEB, 0x26, 0x8B, 0x70, 0x08, 0xFF, 0x15, 0x35, 0x3B, 0x00, 0x00, 0x48,
	0x8B, 0x4B, 0x70, 0x8B, 0xF8, 0x48, 0x85, 0xC9, 0x74, 0x10, 0x83, 0x79,
	0x18, 0x0B, 0x75, 0x0A, 0x44, 0x8B, 0xC6, 0x33, 0xD2, 0xE8, 0x8A, 0x0E,
	0x00, 0x00, 0x8B, 0xC7, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48, 0x8B, 0x74,
	0x24, 0x38, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0x48, 0x8B, 0xC4, 0x48,
	0x89, 0x58, 0x08, 0x57, 0x48, 0x83, 0xEC, 0x50, 0x48, 0x8B, 0xDA, 0x48,
	0x8B, 0xF9, 0x4D, 0x85, 0xC0, 0x74, 0x67, 0x41, 0x0F, 0x10, 0x00, 0x33,
	0xD2, 0x49, 0x8B, 0xC8, 0x0F, 0x11, 0x40, 0xC8, 0x0F, 0x11, 0x40, 0xD8,
	0x41, 0x0F, 0x10, 0x40, 0x10, 0x0F, 0x11, 0x40, 0xE8, 0xFF, 0x15, 0xE1,
	0x1A, 0x00, 0x00, 0x0F, 0x10, 0x44, 0x24, 0x20, 0x66, 0x0F, 0x73, 0xD8,
	0x08, 0x66, 0x0F, 0x7E, 0xC0, 0x83, 0xF8, 0x11, 0x72, 0x15, 0x48, 0x8B,
	0x4C, 0x24, 0x30, 0x48, 0x8D, 0x15, 0xCA, 0x3A, 0x00, 0x00, 0x48, 0x83,
	0xC1, 0x24, 0xE8, 0x6D, 0x0D, 0x00, 0x00, 0x48, 0x8B, 0x44, 0x24, 0x48,
	0x48, 0x85, 0xC0, 0x74, 0x15, 0x80, 0x7B, 0x42, 0x01, 0x7E, 0x0F, 0x4C,
	0x8B, 0x44, 0x24, 0x40, 0x48, 0x8B, 0xD3, 0x48, 0x8B, 0xCF, 0xFF, 0xD0,
	0xEB, 0x02, 0x33, 0xC0, 0x48, 0x8B, 0x5C, 0x24, 0x60, 0x48, 0x83, 0xC4,
	0x50, 0x5F, 0xC3, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x18, 0x55, 0x56, 0x57,
	0x41, 0x56, 0x41, 0x57, 0x48, 0x8B, 0xEC, 0x48, 0x81, 0xEC, 0x80, 0x00,
	0x00, 0x00, 0xE8, 0xD1, 0x07, 0x00, 0x00, 0x48, 0x83, 0x65, 0x38, 0x00,
	0x48, 0x8D, 0x05, 0x05, 0x0F, 0x00, 0x00, 0x48, 0x89, 0x45, 0xD8, 0x45,
	0x33, 0xC9, 0x48, 0x8D, 0x45, 0x38, 0xC7, 0x45, 0xD0, 0x18, 0x00, 0x1A,
	0x00, 0x48, 0x89, 0x44, 0x24, 0x38, 0x45, 0x33, 0xC0, 0x48, 0x8B, 0x05,
	0xB4, 0x1A, 0x00, 0x00, 0x48, 0x83, 0x64, 0x24, 0x30, 0x00, 0x41, 0x8D,
	0x51, 0x40, 0xC6, 0x44, 0x24, 0x28, 0x00, 0x48, 0x8B, 0x08, 0x48, 0x89,
	0x4C, 0x24, 0x20, 0x48, 0x8D, 0x4D, 0xD0, 0xFF, 0x15, 0x83, 0x1A, 0x00,
	0x00, 0x85, 0xC0, 0x0F, 0x88, 0xEC, 0x01, 0x00, 0x00, 0x8B, 0x05, 0x35,
	0x5A, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x4E, 0x3A, 0x00, 0x00, 0x0F, 0x28,
	0x45, 0xD0, 0x4C, 0x8D, 0x05, 0xC3, 0x0E, 0x00, 0x00, 0x8B, 0xD0, 0xFF,
	0xC0, 0x89, 0x05, 0x19, 0x5A, 0x00, 0x00, 0x48, 0x8B, 0x45, 0x38, 0x48,
	0xC1, 0xE2, 0x05, 0x48, 0x05, 0xE0, 0x00, 0x00, 0x00, 0x48, 0x03, 0xD1,
	0x48, 0x8D, 0x0D, 0x5D, 0xFA, 0xFF, 0xFF, 0x48, 0x89, 0x42, 0x10, 0x48,
	0x87, 0x08, 0x48, 0x89, 0x4A, 0x18, 0x48, 0x89, 0x0D, 0xA7, 0x39, 0x00,
	0x00, 0x48, 0x8B, 0x4D, 0x38, 0xF3, 0x0F, 0x7F, 0x02, 0x48, 0x8D, 0x15,
	0xA0, 0x0E, 0x00, 0x00, 0x48, 0x8B, 0x49, 0x18, 0xE8, 0x07, 0x09, 0x00,
	0x00, 0x4C, 0x8B, 0xF8, 0x48, 0x85, 0xC0, 0x0F, 0x84, 0x72, 0x01, 0x00,
	0x00, 0x48, 0x8B, 0x4D, 0x38, 0x4C, 0x8D, 0x4D, 0x30, 0x83, 0x65, 0x30,
	0x00, 0x45, 0x33, 0xC0, 0x33, 0xD2, 0xFF, 0x15, 0xE4, 0x19, 0x00, 0x00,
	0x3D, 0x23, 0x00, 0x00, 0xC0, 0x0F, 0x85, 0x50, 0x01, 0x00, 0x00, 0x8B,
	0x4D, 0x30, 0x85, 0xC9, 0x0F, 0x84, 0x45, 0x01, 0x00, 0x00, 0x8D, 0x1C,
	0xCD, 0x00, 0x00, 0x00, 0x00, 0x41, 0xB8, 0x53, 0x63, 0x55, 0x6E, 0x8B,
	0xD3, 0x33, 0xC9, 0xFF, 0x15, 0x5F, 0x19, 0x00, 0x00, 0x48, 0x8B, 0xF8,
	0x48, 0x85, 0xC0, 0x0F, 0x84, 0x22, 0x01, 0x00, 0x00, 0x48, 0x8B, 0x4D,
	0x38, 0x4C, 0x8D, 0x4D, 0x30, 0x44, 0x8B, 0xC3, 0x48, 0x8B, 0xD0, 0xFF,
	0x15, 0x97, 0x19, 0x00, 0x00, 0x85, 0xC0, 0x0F, 0x88, 0xFB, 0x00, 0x00,
	0x00, 0x8B, 0x45, 0x30, 0x85, 0xC0, 0x0F, 0x84, 0xF0, 0x00, 0x00, 0x00,
	0x33, 0xDB, 0x85, 0xC0, 0x0F, 0x84, 0xE6, 0x00, 0x00, 0x00, 0x4C, 0x8B,
	0x34, 0xDF, 0x49, 0x8B, 0xCE, 0xFF, 0x15, 0x3D, 0x19, 0x00, 0x00, 0x48,
	0x8B, 0xF0, 0x48, 0x85, 0xC0, 0x0F, 0x84, 0x88, 0x00, 0x00, 0x00, 0x0F,
	0x57, 0xC0, 0x48, 0x8D, 0x4D, 0xE0, 0x33, 0xC0, 0x45, 0x33, 0xC0, 0x33,
	0xD2, 0x48, 0x89, 0x45, 0xF0, 0x0F, 0x11, 0x45, 0xE0, 0xFF, 0x15, 0xDD,
	0x18, 0x00, 0x00, 0x48, 0x83, 0x64, 0x24, 0x40, 0x00, 0x48, 0x8D, 0x45,
	0xE0, 0x48, 0x89, 0x44, 0x24, 0x38, 0x45, 0x33, 0xC9, 0xC6, 0x44, 0x24,
	0x30, 0x00, 0x45, 0x33, 0xC0, 0x83, 0x64, 0x24, 0x28, 0x00, 0x48, 0x8B,
	0xD6, 0x48, 0x83, 0x64, 0x24, 0x20, 0x00, 0xB9, 0x40, 0x01, 0x07, 0x00,
	0xFF, 0x15, 0xD2, 0x18, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x2B, 0x48,
	0x8B, 0xD0, 0x48, 0x8B, 0xCE, 0xFF, 0x15, 0xC9, 0x18, 0x00, 0x00, 0x3D,
	0x03, 0x01, 0x00, 0x00, 0x75, 0x18, 0x48, 0x83, 0x64, 0x24, 0x20, 0x00,
	0x48, 0x8D, 0x4D, 0xE0, 0x45, 0x33, 0xC9, 0x45, 0x33, 0xC0, 0x33, 0xD2,
	0xFF, 0x15, 0x82, 0x18, 0x00, 0x00, 0x48, 0x8B, 0xCE, 0xFF, 0x15, 0xB9,
	0x18, 0x00, 0x00, 0x49, 0x8B, 0x4E, 0x40, 0x48, 0x85, 0xC9, 0x74, 0x28,
	0x48, 0x8B, 0x81, 0x08, 0x02, 0x00, 0x00, 0x4C, 0x8D, 0x05, 0x7A, 0x38,
	0x00, 0x00, 0x8B, 0x50, 0x18, 0x48, 0x03, 0xD0, 0x41, 0x8A, 0x00, 0x49,
	0xFF, 0xC0, 0x88, 0x02, 0x48, 0xFF, 0xC2, 0x84, 0xC0, 0x75, 0xF1, 0x33,
	0xD2, 0x41, 0xFF, 0xD7, 0x49, 0x8B, 0xCE, 0xFF, 0x15, 0x7F, 0x18, 0x00,
	0x00, 0xFF, 0xC3, 0x3B, 0x5D, 0x30, 0x0F, 0x82, 0x1A, 0xFF, 0xFF, 0xFF,
	0x33, 0xD2, 0x48, 0x8B, 0xCF, 0xFF, 0x15, 0x39, 0x18, 0x00, 0x00, 0x48,
	0x8B, 0x4D, 0x38, 0xFF, 0x15, 0x5F, 0x18, 0x00, 0x00, 0x48, 0x8B, 0x9C,
	0x24, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x81, 0xC4, 0x80, 0x00, 0x00, 0x00,
	0x41, 0x5F, 0x41, 0x5E, 0x5F, 0x5E, 0x5D, 0xC3, 0x4C, 0x8B, 0xDC, 0x48,
	0x83, 0xEC, 0x58, 0x49, 0x83, 0x63, 0x08, 0x00, 0x48, 0x8D, 0x05, 0x45,
	0x0E, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x40, 0x20, 0x00, 0x22, 0x00, 0x45,
	0x33, 0xC9, 0x49, 0x89, 0x43, 0xF0, 0x45, 0x33, 0xC0, 0x49, 0x8D, 0x43,
	0x08, 0x49, 0x89, 0x43, 0xE0, 0x49, 0x83, 0x63, 0xD8, 0x00, 0x41, 0x8D,
	0x51, 0x40, 0x48, 0x8B, 0x05, 0x4B, 0x18, 0x00, 0x00, 0xC6, 0x44, 0x24,
	0x28, 0x00, 0x48, 0x8B, 0x08, 0x49, 0x89, 0x4B, 0xC8, 0x49, 0x8D, 0x4B,
	0xE8, 0xFF, 0x15, 0x25, 0x18, 0x00, 0x00, 0x85, 0xC0, 0x78, 0x56, 0x8B,
	0x05, 0xDB, 0x57, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0xF4, 0x37, 0x00, 0x00,
	0x0F, 0x28, 0x44, 0x24, 0x40, 0x8B, 0xD0, 0xFF, 0xC0, 0x48, 0xC1, 0xE2,
	0x05, 0x89, 0x05, 0xC1, 0x57, 0x00, 0x00, 0x48, 0x03, 0xD1, 0x48, 0x8B,
	0x44, 0x24, 0x60, 0x48, 0x8D, 0x0D, 0xC6, 0xF8, 0xFF, 0xFF, 0x48, 0x05,
	0xE0, 0x00, 0x00, 0x00, 0x48, 0x89, 0x42, 0x10, 0x48, 0x87, 0x08, 0x48,
	0x89, 0x4A, 0x18, 0x48, 0x89, 0x0D, 0x72, 0x37, 0x00, 0x00, 0x48, 0x8B,
	0x4C, 0x24, 0x60, 0xF3, 0x0F, 0x7F, 0x02, 0xFF, 0x15, 0x9B, 0x17, 0x00,
	0x00, 0x48, 0x83, 0xC4, 0x58, 0xC3, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24,
	0x20, 0x55, 0x56, 0x57, 0x41, 0x55, 0x41, 0x56, 0x48, 0x8D, 0xAC, 0x24,
	0x90, 0xFE, 0xFF, 0xFF, 0x48, 0x81, 0xEC, 0x70, 0x02, 0x00, 0x00, 0x48,
	0x83, 0xA5, 0xA0, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x05, 0x6A, 0x0C,
	0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x48, 0x45, 0x33, 0xC9, 0x48, 0x8D,
	0x85, 0xA0, 0x01, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x40, 0x20, 0x00, 0x22,
	0x00, 0x48, 0x89, 0x44, 0x24, 0x38, 0x45, 0x33, 0xC0, 0x48, 0x8B, 0x05,
	0x84, 0x17, 0x00, 0x00, 0x48, 0x83, 0x64, 0x24, 0x30, 0x00, 0x41, 0x8D,
	0x51, 0x40, 0xC6, 0x44, 0x24, 0x28, 0x00, 0x48, 0x8B, 0x08, 0x48, 0x89,
	0x4C, 0x24, 0x20, 0x48, 0x8D, 0x4C, 0x24, 0x40, 0xFF, 0x15, 0x52, 0x17,
	0x00, 0x00, 0x48, 0x8D, 0x0D, 0x2B, 0x37, 0x00, 0x00, 0x85, 0xC0, 0x78,
	0x53, 0x8B, 0x05, 0x01, 0x57, 0x00, 0x00, 0x0F, 0x28, 0x44, 0x24, 0x40,
	0x8B, 0xD0, 0xFF, 0xC0, 0x48, 0xC1, 0xE2, 0x05, 0x89, 0x05, 0xEE, 0x56,
	0x00, 0x00, 0x48, 0x03, 0xD1, 0x48, 0x8B, 0x85, 0xA0, 0x01, 0x00, 0x00,
	0x48, 0x8D, 0x0D, 0x45, 0xFB, 0xFF, 0xFF, 0x48, 0x05, 0xE0, 0x00, 0x00,
	0x00, 0x48, 0x89, 0x42, 0x10, 0x48, 0x87, 0x08, 0x48, 0x89, 0x4A, 0x18,
	0x48, 0x89, 0x0D, 0x95, 0x36, 0x00, 0x00, 0x48, 0x8B, 0x8D, 0xA0, 0x01,
	0x00, 0x00, 0xF3, 0x0F, 0x7F, 0x02, 0xFF, 0x15, 0xC4, 0x16, 0x00, 0x00,
	0x33, 0xD2, 0x48, 0x8D, 0x0D, 0xEB, 0x0B, 0x00, 0x00, 0xE8, 0x72, 0x06,
	0x00, 0x00, 0x48, 0x8B, 0xF8, 0x48, 0x85, 0xC0, 0x0F, 0x84, 0xE9, 0x01,
	0x00, 0x00, 0x4C, 0x8D, 0x05, 0xE3, 0x0B, 0x00, 0x00, 0x48, 0x8B, 0xC8,
	0x48, 0x8D, 0x15, 0xE9, 0x0B, 0x00, 0x00, 0xE8, 0xB4, 0x05, 0x00, 0x00,
	0x48, 0x8B, 0xD8, 0x48, 0x85, 0xC0, 0x0F, 0x84, 0xC7, 0x01, 0x00, 0x00,
	0x4C, 0x8D, 0x05, 0xE1, 0x0B, 0x00, 0x00, 0x48, 0x8B, 0xCF, 0x48, 0x8D,
	0x15, 0xF7, 0x0B, 0x00, 0x00, 0xE8, 0x92, 0x05, 0x00, 0x00, 0x48, 0x85,
	0xC0, 0x0F, 0x84, 0xA8, 0x01, 0x00, 0x00, 0x48, 0x63, 0x4B, 0x06, 0x8B,
	0x50, 0x0C, 0x48, 0x8B, 0x5C, 0x19, 0x0A, 0x48, 0x85, 0xDB, 0x0F, 0x84,
	0x93, 0x01, 0x00, 0x00, 0x44, 0x8B, 0xF2, 0x4C, 0x8D, 0x2D, 0x02, 0x26,
	0x00, 0x00, 0x49, 0x8B, 0x3C, 0x1E, 0x48, 0x85, 0xFF, 0x0F, 0x84, 0x6F,
	0x01, 0x00, 0x00, 0x48, 0x8B, 0x4B, 0x28, 0xBA, 0x04, 0x01, 0x00, 0x00,
	0x48, 0x83, 0xC1, 0x10, 0xE8, 0xD7, 0x07, 0x00, 0x00, 0x48, 0x8B, 0xF0,
	0x48, 0x85, 0xC0, 0x0F, 0x84, 0x1D, 0x01, 0x00, 0x00, 0x33, 0xD2, 0x48,
	0x8D, 0x4C, 0x24, 0x60, 0x41, 0xB8, 0x08, 0x02, 0x00, 0x00, 0xE8, 0x3D,
	0x09, 0x00, 0x00, 0xBA, 0x82, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xCE, 0xE8,
	0xC0, 0x08, 0x00, 0x00, 0x4C, 0x8B, 0xC0, 0x48, 0x8D, 0x15, 0x96, 0x0B,
	0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x60, 0xE8, 0xEF, 0x08, 0x00, 0x00,
	0x33, 0xD2, 0x48, 0x8B, 0xCE, 0xFF, 0x15, 0xB1, 0x15, 0x00, 0x00, 0x0F,
	0x57, 0xC0, 0x48, 0x8D, 0x54, 0x24, 0x60, 0x48, 0x8D, 0x4C, 0x24, 0x50,
	0x0F, 0x11, 0x44, 0x24, 0x50, 0xFF, 0x15, 0x79, 0x15, 0x00, 0x00, 0x48,
	0x83, 0xA5, 0xB0, 0x01, 0x00, 0x00, 0x00, 0x4C, 0x8D, 0x8D, 0xA8, 0x01,
	0x00, 0x00, 0x48, 0x83, 0xA5, 0xA8, 0x01, 0x00, 0x00, 0x00, 0x4C, 0x8D,
	0x85, 0xB0, 0x01, 0x00, 0x00, 0xBA, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8D,
	0x4C, 0x24, 0x50, 0xFF, 0x15, 0x93, 0x15, 0x00, 0x00, 0x85, 0xC0, 0x0F,
	0x88, 0x91, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x85, 0xA8, 0x01, 0x00, 0x00,
	0x4C, 0x8B, 0x48, 0x08, 0x4D, 0x85, 0xC9, 0x74, 0x74, 0x8B, 0x15, 0x2D,
	0x25, 0x00, 0x00, 0x33, 0xC9, 0x85, 0xD2, 0x74, 0x12, 0x8B, 0xC1, 0x48,
	0x03, 0xC0, 0x4D, 0x39, 0x4C, 0xC5, 0x00, 0x74, 0x5C, 0xFF, 0xC1, 0x3B,
	0xCA, 0x72, 0xEE, 0x8B, 0x05, 0x4F, 0x55, 0x00, 0x00, 0x48, 0x8D, 0x0D,
	0x68, 0x35, 0x00, 0x00, 0x4C, 0x8B, 0xC2, 0x8B, 0xD0, 0x4D, 0x03, 0xC0,
	0x48, 0xC1, 0xE2, 0x05, 0x48, 0x03, 0xD1, 0xFF, 0xC0, 0x48, 0x8D, 0x0D,
	0x58, 0xF8, 0xFF, 0xFF, 0x4F, 0x89, 0x4C, 0xC5, 0x00, 0x41, 0x0F, 0x10,
	0x41, 0x38, 0x89, 0x05, 0x20, 0x55, 0x00, 0x00, 0x49, 0x8D, 0x81, 0xE0,
	0x00, 0x00, 0x00, 0x48, 0x89, 0x42, 0x10, 0x48, 0x87, 0x08, 0x4B, 0x89,
	0x4C, 0xC5, 0x08, 0xFF, 0x05, 0xC7, 0x24, 0x00, 0x00, 0x48, 0x89, 0x4A,
	0x18, 0xF3, 0x0F, 0x7F, 0x02, 0x48, 0x8B, 0x8D, 0xB0, 0x01, 0x00, 0x00,
	0xFF, 0x15, 0x02, 0x15, 0x00, 0x00, 0x44, 0x0F, 0xB7, 0x87, 0x64, 0x04,
	0x00, 0x00, 0x48, 0x8D, 0x97, 0x66, 0x04, 0x00, 0x00, 0x8B, 0x0D, 0xBD,
	0x34, 0x00, 0x00, 0xE8, 0x14, 0x07, 0x00, 0x00, 0x44, 0x0F, 0xB7, 0x87,
	0x86, 0x04, 0x00, 0x00, 0x48, 0x8D, 0x97, 0x88, 0x04, 0x00, 0x00, 0x8B,
	0x0D, 0xA3, 0x34, 0x00, 0x00, 0xE8, 0xFA, 0x06, 0x00, 0x00, 0x48, 0x8B,
	0x5B, 0x08, 0x48, 0x85, 0xDB, 0x0F, 0x85, 0x77, 0xFE, 0xFF, 0xFF, 0x48,
	0x8B, 0x9C, 0x24, 0xB8, 0x02, 0x00, 0x00, 0x48, 0x81, 0xC4, 0x70, 0x02,
	0x00, 0x00, 0x41, 0x5E, 0x41, 0x5D, 0x5F, 0x5E, 0x5D, 0xC3, 0xCC, 0xCC,
	0x40, 0x53, 0x48, 0x83, 0xEC, 0x20, 0x33, 0xD2, 0x48, 0x8D, 0x0D, 0x59,
	0x0A, 0x00, 0x00, 0xE8, 0x50, 0x04, 0x00, 0x00, 0x48, 0x8B, 0xD8, 0x48,
	0x85, 0xC0, 0x74, 0x5D, 0x4C, 0x8D, 0x05, 0x55, 0x0A, 0x00, 0x00, 0x48,
	0x8B, 0xC8, 0x48, 0x8D, 0x15, 0x5B, 0x0A, 0x00, 0x00, 0xE8, 0x96, 0x03,
	0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x1C, 0x48, 0x63, 0x48, 0x03, 0x48,
	0x8D, 0x50, 0x07, 0x48, 0x03, 0xD1, 0x41, 0xB8, 0x10, 0x00, 0x00, 0x00,
	0x8B, 0x0D, 0x2A, 0x34, 0x00, 0x00, 0xE8, 0x81, 0x06, 0x00, 0x00, 0x4C,
	0x8D, 0x05, 0x3E, 0x0A, 0x00, 0x00, 0x48, 0x8B, 0xCB, 0x48, 0x8D, 0x15,
	0x44, 0x0A, 0x00, 0x00, 0xE8, 0x5F, 0x03, 0x00, 0x00, 0x48, 0x85, 0xC0,
	0x74, 0x0B, 0x48, 0x63, 0x48, 0x03, 0x33, 0xD2, 0x48, 0x89, 0x54, 0x01,
	0x07, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0xC3, 0xCC, 0x4C, 0x8B, 0xDC, 0x48,
	0x83, 0xEC, 0x58, 0x49, 0x83, 0x63, 0x08, 0x00, 0x48, 0x8D, 0x05, 0xE5,
	0x08, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x40, 0x20, 0x00, 0x22, 0x00, 0x45,
	0x33, 0xC9, 0x49, 0x89, 0x43, 0xF0, 0x45, 0x33, 0xC0, 0x49, 0x8D, 0x43,
	0x08, 0x49, 0x89, 0x43, 0xE0, 0x49, 0x83, 0x63, 0xD8, 0x00, 0x41, 0x8D,
	0x51, 0x40, 0x48, 0x8B, 0x05, 0x2B, 0x14, 0x00, 0x00, 0xC6, 0x44, 0x24,
	0x28, 0x00, 0x48, 0x8B, 0x08, 0x49, 0x89, 0x4B, 0xC8, 0x49, 0x8D, 0x4B,
	0xE8, 0xFF, 0x15, 0x05, 0x14, 0x00, 0x00, 0x85, 0xC0, 0x78, 0x56, 0x8B,
	0x05, 0xBB, 0x53, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0xD4, 0x33, 0x00, 0x00,
	0x0F, 0x28, 0x44, 0x24, 0x40, 0x8B, 0xD0, 0xFF, 0xC0, 0x48, 0xC1, 0xE2,
	0x05, 0x89, 0x05, 0xA1, 0x53, 0x00, 0x00, 0x48, 0x03, 0xD1, 0x48, 0x8B,
	0x44, 0x24, 0x60, 0x48, 0x8D, 0x0D, 0x22, 0xF5, 0xFF, 0xFF, 0x48, 0x05,
	0xE0, 0x00, 0x00, 0x00, 0x48, 0x89, 0x42, 0x10, 0x48, 0x87, 0x08, 0x48,
	0x89, 0x4A, 0x18, 0x48, 0x89, 0x0D, 0x3A, 0x33, 0x00, 0x00, 0x48, 0x8B,
	0x4C, 0x24, 0x60, 0xF3, 0x0F, 0x7F, 0x02, 0xFF, 0x15, 0x7B, 0x13, 0x00,
	0x00, 0x48, 0x83, 0xC4, 0x58, 0xC3, 0xCC, 0xCC, 0x48, 0x8B, 0xC4, 0x48,
	0x89, 0x58, 0x08, 0x57, 0x48, 0x83, 0xEC, 0x50, 0x48, 0x8B, 0xDA, 0x48,
	0x8B, 0xF9, 0x4D, 0x85, 0xC0, 0x74, 0x7F, 0x41, 0x0F, 0x10, 0x00, 0x33,
	0xD2, 0x49, 0x8B, 0xC8, 0x0F, 0x11, 0x40, 0xC8, 0x0F, 0x11, 0x40, 0xD8,
	0x41, 0x0F, 0x10, 0x40, 0x10, 0x0F, 0x11, 0x40, 0xE8, 0xFF, 0x15, 0x0D,
	0x13, 0x00, 0x00, 0x0F, 0x10, 0x44, 0x24, 0x20, 0x66, 0x0F, 0x73, 0xD8,
	0x08, 0x66, 0x0F, 0x7E, 0xC1, 0x83, 0xF9, 0x28, 0x72, 0x2D, 0x48, 0x8B,
	0x54, 0x24, 0x30, 0x8B, 0x42, 0x18, 0x85, 0xC0, 0x74, 0x21, 0x3B, 0xC1,
	0x73, 0x1D, 0x48, 0x8D, 0x0D, 0xEB, 0x32, 0x00, 0x00, 0x44, 0x8B, 0xC0,
	0x4C, 0x2B, 0xC1, 0x4C, 0x03, 0xC2, 0x8A, 0x01, 0x41, 0x88, 0x04, 0x08,
	0x48, 0xFF, 0xC1, 0x84, 0xC0, 0x75, 0xF3, 0x48, 0x8B, 0x44, 0x24, 0x48,
	0x48, 0x85, 0xC0, 0x74, 0x15, 0x80, 0x7B, 0x42, 0x01, 0x7E, 0x0F, 0x4C,
	0x8B, 0x44, 0x24, 0x40, 0x48, 0x8B, 0xD3, 0x48, 0x8B, 0xCF, 0xFF, 0xD0,
	0xEB, 0x02, 0x33, 0xC0, 0x48, 0x8B, 0x5C, 0x24, 0x60, 0x48, 0x83, 0xC4,
	0x50, 0x5F, 0xC3, 0xCC, 0x40, 0x55, 0x48, 0x8D, 0x6C, 0x24, 0xA9, 0x48,
	0x81, 0xEC, 0xB0, 0x00, 0x00, 0x00, 0x48, 0x83, 0x65, 0x6F, 0x00, 0x48,
	0x8D, 0x15, 0xD6, 0x06, 0x00, 0x00, 0x48, 0x8D, 0x4D, 0x07, 0xFF, 0x15,
	0x5C, 0x12, 0x00, 0x00, 0x83, 0x64, 0x24, 0x50, 0x00, 0x48, 0x8D, 0x45,
	0x07, 0x48, 0x83, 0x64, 0x24, 0x48, 0x00, 0x4C, 0x8D, 0x4D, 0x17, 0x48,
	0x83, 0x65, 0x2F, 0x00, 0x4C, 0x8D, 0x45, 0x27, 0xC7, 0x44, 0x24, 0x40,
	0x20, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x4D, 0x67, 0xC7, 0x44, 0x24, 0x38,
	0x01, 0x00, 0x00, 0x00, 0x0F, 0x57, 0xC0, 0x83, 0x64, 0x24, 0x30, 0x00,
	0xBA, 0x00, 0x00, 0x00, 0x10, 0xC7, 0x44, 0x24, 0x28, 0x80, 0x00, 0x00,
	0x00, 0x48, 0x83, 0x64, 0x24, 0x20, 0x00, 0xC7, 0x45, 0x27, 0x30, 0x00,
	0x00, 0x00, 0xC7, 0x45, 0x3F, 0x40, 0x02, 0x00, 0x00, 0x48, 0x89, 0x45,
	0x37, 0xF3, 0x0F, 0x7F, 0x45, 0x47, 0xFF, 0x15, 0x4C, 0x12, 0x00, 0x00,
	0x48, 0x83, 0x64, 0x24, 0x40, 0x00, 0x48, 0x8D, 0x45, 0x6F, 0x48, 0x8B,
	0x4D, 0x67, 0x45, 0x33, 0xC9, 0x48, 0x89, 0x44, 0x24, 0x38, 0x45, 0x33,
	0xC0, 0x48, 0x8D, 0x05, 0xFC, 0x31, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x30,
	0x32, 0x00, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x28, 0x33, 0xD2, 0x48,
	0x8D, 0x45, 0x17, 0x48, 0x89, 0x44, 0x24, 0x20, 0xFF, 0x15, 0x16, 0x12,
	0x00, 0x00, 0x48, 0x8B, 0x4D, 0x67, 0xC6, 0x05, 0x04, 0x32, 0x00, 0x00,
	0x00, 0xFF, 0x15, 0x0D, 0x12, 0x00, 0x00, 0x48, 0x81, 0xC4, 0xB0, 0x00,
	0x00, 0x00, 0x5D, 0xC3, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x74,
	0x24, 0x10, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x49, 0x8B, 0xF8, 0x48, 0x8B,
	0xF2, 0x48, 0x8B, 0xD9, 0xBA, 0x20, 0x00, 0x00, 0x00, 0x41, 0xB8, 0x53,
	0x63, 0x55, 0x6E, 0x33, 0xC9, 0xFF, 0x15, 0x89, 0x11, 0x00, 0x00, 0x48,
	0x85, 0xC0, 0x74, 0x29, 0x48, 0x8B, 0x56, 0x18, 0x48, 0x89, 0x10, 0x8B,
	0x53, 0x08, 0x89, 0x50, 0x08, 0x48, 0x8B, 0x4B, 0x40, 0x48, 0x89, 0x48,
	0x10, 0x48, 0x8B, 0x4B, 0x38, 0x48, 0x89, 0x48, 0x18, 0xC6, 0x43, 0x03,
	0x40, 0x48, 0x89, 0x43, 0x40, 0x48, 0x89, 0x7B, 0x38, 0x48, 0x8B, 0x5C,
	0x24, 0x30, 0x48, 0x8B, 0x74, 0x24, 0x38, 0x48, 0x83, 0xC4, 0x20, 0x5F,
	0xC3, 0xCC, 0xCC, 0xCC, 0x41, 0x8A, 0x00, 0x84, 0xC0, 0x74, 0x1C, 0x48,
	0x2B, 0xCA, 0x4C, 0x2B, 0xC2, 0x3C, 0x78, 0x75, 0x07, 0x8A, 0x02, 0x38,
	0x04, 0x11, 0x75, 0x11, 0x48, 0xFF, 0xC2, 0x41, 0x8A, 0x04, 0x10, 0x84,
	0xC0, 0x75, 0xEA, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xC3, 0x33, 0xC0, 0xC3,
	0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x6C, 0x24, 0x10, 0x48, 0x89,
	0x74, 0x24, 0x18, 0x57, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xEC, 0x20,
	0x49, 0x8B, 0xE9, 0x4D, 0x8B, 0xF0, 0x8B, 0xF2, 0x4C, 0x8B, 0xF9, 0x48,
	0x83, 0xC8, 0xFF, 0x48, 0xFF, 0xC0, 0x42, 0x80, 0x3C, 0x08, 0x00, 0x75,
	0xF6, 0x2B, 0xF0, 0x33, 0xDB, 0x8B, 0xFB, 0x4C, 0x8B, 0xC5, 0x49, 0x03,
	0xFF, 0x49, 0x8B, 0xD6, 0x48, 0x8B, 0xCF, 0xE8, 0x8C, 0xFF, 0xFF, 0xFF,
	0x85, 0xC0, 0x75, 0x0A, 0xFF, 0xC3, 0x3B, 0xDE, 0x76, 0xE3, 0x33, 0xC0,
	0xEB, 0x03, 0x48, 0x8B, 0xC7, 0x48, 0x8B, 0x5C, 0x24, 0x40, 0x48, 0x8B,
	0x6C, 0x24, 0x48, 0x48, 0x8B, 0x74, 0x24, 0x50, 0x48, 0x83, 0xC4, 0x20,
	0x41, 0x5F, 0x41, 0x5E, 0x5F, 0xC3, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24,
	0x08, 0x48, 0x89, 0x6C, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57,
	0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x4C, 0x63, 0x49, 0x3C,
	0x48, 0x8D, 0x59, 0x18, 0x49, 0x03, 0xD9, 0x45, 0x33, 0xD2, 0x33, 0xFF,
	0x4D, 0x8B, 0xF0, 0x4C, 0x8B, 0xFA, 0x48, 0x8B, 0xE9, 0x41, 0x0F, 0xB7,
	0x44, 0x09, 0x14, 0x41, 0x0F, 0xB7, 0x74, 0x09, 0x06, 0x48, 0x03, 0xD8,
	0x85, 0xF6, 0x74, 0x3C, 0x81, 0x3B, 0x50, 0x41, 0x47, 0x45, 0x74, 0x0E,
	0x81, 0x3B, 0x2E, 0x74, 0x65, 0x78, 0x75, 0x22, 0x80, 0x7B, 0x04, 0x74,
	0x75, 0x1C, 0x8B, 0x4B, 0x0C, 0x4D, 0x8B, 0xCE, 0x8B, 0x53, 0x08, 0x48,
	0x03, 0xCD, 0x4D, 0x8B, 0xC7, 0xE8, 0x1E, 0xFF, 0xFF, 0xFF, 0x4C, 0x8B,
	0xD0, 0x48, 0x85, 0xC0, 0x75, 0x0A, 0xFF, 0xC7, 0x48, 0x83, 0xC3, 0x28,
	0x3B, 0xFE, 0x72, 0xC4, 0x48, 0x8B, 0x5C, 0x24, 0x40, 0x49, 0x8B, 0xC2,
	0x48, 0x8B, 0x6C, 0x24, 0x48, 0x48, 0x8B, 0x74, 0x24, 0x50, 0x48, 0x83,
	0xC4, 0x20, 0x41, 0x5F, 0x41, 0x5E, 0x5F, 0xC3, 0x48, 0x8B, 0xC4, 0x48,
	0x89, 0x58, 0x08, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x20, 0x57,
	0x41, 0x56, 0x41, 0x57, 0x48, 0x81, 0xEC, 0x50, 0x01, 0x00, 0x00, 0x33,
	0xDB, 0x4C, 0x8D, 0x48, 0x18, 0x4C, 0x8B, 0xF2, 0x89, 0x58, 0x18, 0x4C,
	0x8B, 0xF9, 0x45, 0x33, 0xC0, 0x33, 0xD2, 0x8B, 0xEB, 0x8D, 0x73, 0x0B,
	0x8B, 0xCE, 0xE8, 0x25, 0x03, 0x00, 0x00, 0x3D, 0x04, 0x00, 0x00, 0xC0,
	0x0F, 0x85, 0x14, 0x01, 0x00, 0x00, 0x8B, 0x94, 0x24, 0x80, 0x01, 0x00,
	0x00, 0x33, 0xC9, 0x41, 0xB8, 0x53, 0x63, 0x55, 0x6E, 0xFF, 0x15, 0xB1,
	0x0F, 0x00, 0x00, 0x48, 0x8B, 0xF8, 0x48, 0x85, 0xC0, 0x0F, 0x84, 0xF3,
	0x00, 0x00, 0x00, 0x44, 0x8B, 0x84, 0x24, 0x80, 0x01, 0x00, 0x00, 0x45,
	0x33, 0xC9, 0x48, 0x8B, 0xD0, 0x8B, 0xCE, 0xE8, 0xE4, 0x02, 0x00, 0x00,
	0x85, 0xC0, 0x0F, 0x88, 0xC6, 0x00, 0x00, 0x00, 0x8B, 0xF3, 0x39, 0x1F,
	0x0F, 0x86, 0xB9, 0x00, 0x00, 0x00, 0x8B, 0xC6, 0xBA, 0x02, 0x00, 0x00,
	0x00, 0x48, 0x69, 0xC8, 0x28, 0x01, 0x00, 0x00, 0x48, 0x8D, 0x47, 0x08,
	0x48, 0x03, 0xC1, 0x48, 0x8D, 0x4C, 0x24, 0x20, 0x0F, 0x10, 0x00, 0x0F,
	0x10, 0x48, 0x10, 0x48, 0x8D, 0x80, 0x80, 0x00, 0x00, 0x00, 0x0F, 0x11,
	0x01, 0x0F, 0x10, 0x40, 0xA0, 0x0F, 0x11, 0x49, 0x10, 0x0F, 0x10, 0x48,
	0xB0, 0x0F, 0x11, 0x41, 0x20, 0x0F, 0x10, 0x40, 0xC0, 0x0F, 0x11, 0x49,
	0x30, 0x0F, 0x10, 0x48, 0xD0, 0x0F, 0x11, 0x41, 0x40, 0x0F, 0x10, 0x40,
	0xE0, 0x0F, 0x11, 0x49, 0x50, 0x0F, 0x10, 0x48, 0xF0, 0x0F, 0x11, 0x41,
	0x60, 0x48, 0x8D, 0x89, 0x80, 0x00, 0x00, 0x00, 0x0F, 0x11, 0x49, 0xF0,
	0x48, 0x83, 0xEA, 0x01, 0x75, 0xAE, 0x0F, 0x10, 0x00, 0x0F, 0x10, 0x48,
	0x10, 0x48, 0x8B, 0x40, 0x20, 0x0F, 0x11, 0x01, 0x0F, 0x11, 0x49, 0x10,
	0x48, 0x89, 0x41, 0x20, 0x48, 0x8D, 0x4C, 0x24, 0x48, 0xE8, 0x9E, 0x00,
	0x00, 0x00, 0x48, 0x8B, 0xC8, 0x49, 0x8B, 0xD7, 0xE8, 0x35, 0x02, 0x00,
	0x00, 0x48, 0x85, 0xC0, 0x75, 0x0C, 0xFF, 0xC6, 0x3B, 0x37, 0x0F, 0x82,
	0x5A, 0xFF, 0xFF, 0xFF, 0xEB, 0x11, 0x48, 0x8B, 0x6C, 0x24, 0x30, 0x4D,
	0x85, 0xF6, 0x74, 0x07, 0x8B, 0x44, 0x24, 0x38, 0x41, 0x89, 0x06, 0x48,
	0x8B, 0xDD, 0x33, 0xD2, 0x48, 0x8B, 0xCF, 0xFF, 0x15, 0xBF, 0x0E, 0x00,
	0x00, 0x48, 0x8B, 0xC3, 0xEB, 0x02, 0x33, 0xC0, 0x4C, 0x8D, 0x9C, 0x24,
	0x50, 0x01, 0x00, 0x00, 0x49, 0x8B, 0x5B, 0x20, 0x49, 0x8B, 0x6B, 0x28,
	0x49, 0x8B, 0x73, 0x38, 0x49, 0x8B, 0xE3, 0x41, 0x5F, 0x41, 0x5E, 0x5F,
	0xC3, 0xCC, 0xCC, 0xCC, 0x4C, 0x8B, 0xC1, 0x85, 0xD2, 0x75, 0x03, 0x33,
	0xC0, 0xC3, 0x0F, 0xB6, 0x01, 0x35, 0x2F, 0xCE, 0x9A, 0x4B, 0x69, 0xC8,
	0x93, 0x01, 0x00, 0x01, 0x83, 0xFA, 0x01, 0x76, 0x1A, 0x49, 0xFF, 0xC0,
	0xFF, 0xCA, 0x41, 0x0F, 0xB6, 0x00, 0x49, 0xFF, 0xC0, 0x33, 0xC1, 0x69,
	0xC8, 0x93, 0x01, 0x00, 0x01, 0x48, 0x83, 0xEA, 0x01, 0x75, 0xEB, 0x8B,
	0xC1, 0xC3, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x57, 0x48, 0x83,
	0xEC, 0x20, 0x8A, 0x01, 0x48, 0x8B, 0xD9, 0x48, 0x8B, 0xF9, 0xEB, 0x0F,
	0x0F, 0xBE, 0xC8, 0xE8, 0x80, 0x01, 0x00, 0x00, 0x88, 0x07, 0x48, 0xFF,
	0xC7, 0x8A, 0x07, 0x84, 0xC0, 0x75, 0xED, 0x48, 0x8B, 0xC3, 0x48, 0x8B,
	0x5C, 0x24, 0x30, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0xCC, 0xCC, 0xCC,
	0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48,
	0x83, 0xEC, 0x30, 0x48, 0x8B, 0xF1, 0x8B, 0xFA, 0x8B, 0xD2, 0x33, 0xC9,
	0x41, 0xB8, 0x53, 0x63, 0x55, 0x6E, 0xFF, 0x15, 0xF8, 0x0D, 0x00, 0x00,
	0x48, 0x8B, 0xD8, 0x48, 0x85, 0xC0, 0x74, 0x40, 0x48, 0x83, 0x64, 0x24,
	0x50, 0x00, 0x48, 0x8D, 0x44, 0x24, 0x50, 0x41, 0xB9, 0x02, 0x00, 0x00,
	0x00, 0x48, 0x89, 0x44, 0x24, 0x20, 0x44, 0x8B, 0xC7, 0x48, 0x8B, 0xD6,
	0x48, 0x8B, 0xCB, 0xFF, 0x15, 0x5B, 0x0E, 0x00, 0x00, 0x85, 0xC0, 0x78,
	0x0C, 0x48, 0x39, 0x7C, 0x24, 0x50, 0x75, 0x05, 0x48, 0x8B, 0xC3, 0xEB,
	0x0D, 0x33, 0xD2, 0x48, 0x8B, 0xCB, 0xFF, 0x15, 0xB8, 0x0D, 0x00, 0x00,
	0x33, 0xC0, 0x48, 0x8B, 0x5C, 0x24, 0x40, 0x48, 0x8B, 0x74, 0x24, 0x48,
	0x48, 0x83, 0xC4, 0x30, 0x5F, 0xC3, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24,
	0x08, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xEC, 0x20, 0x48,
	0x8B, 0xFA, 0x41, 0x8B, 0xF0, 0x8B, 0xD9, 0x41, 0x8B, 0xD0, 0x48, 0x8B,
	0xCF, 0xE8, 0xEA, 0xFE, 0xFF, 0xFF, 0x33, 0xD8, 0x85, 0xF6, 0x74, 0x1E,
	0x8B, 0xCE, 0x69, 0xDB, 0x6D, 0x4E, 0xC6, 0x41, 0x81, 0xC3, 0x39, 0x30,
	0x00, 0x00, 0x8B, 0xC3, 0xC1, 0xE8, 0x10, 0x30, 0x07, 0x48, 0xFF, 0xC7,
	0x48, 0x83, 0xE9, 0x01, 0x75, 0xE4, 0x48, 0x8B, 0x5C, 0x24, 0x30, 0x48,
	0x8B, 0x74, 0x24, 0x38, 0x48, 0x83, 0xC4, 0x20, 0x5F, 0xC3, 0xCC, 0xCC,
	0x4C, 0x8B, 0xC1, 0x48, 0x83, 0xC8, 0xFF, 0x48, 0xFF, 0xC0, 0x80, 0x3C,
	0x02, 0x00, 0x75, 0xF7, 0x48, 0x85, 0xC0, 0x74, 0x26, 0x49, 0x2B, 0xD0,
	0x48, 0xFF, 0xC1, 0x4C, 0x8D, 0x40, 0xFF, 0x49, 0xD1, 0xE8, 0x49, 0xFF,
	0xC0, 0x8A, 0x04, 0x0A, 0x88, 0x41, 0xFF, 0x8A, 0x44, 0x0A, 0xFF, 0x88,
	0x01, 0x48, 0x8D, 0x49, 0x02, 0x49, 0x83, 0xE8, 0x01, 0x75, 0xEA, 0xC3,
	0x45, 0x33, 0xDB, 0x44, 0x8B, 0xCA, 0x4C, 0x8B, 0xD1, 0x45, 0x8B, 0xC3,
	0x48, 0x8B, 0xC1, 0x41, 0x83, 0xC1, 0xFF, 0x74, 0x12, 0x66, 0x83, 0x38,
	0x7B, 0x74, 0x0C, 0x41, 0xFF, 0xC0, 0x48, 0x83, 0xC0, 0x02, 0x45, 0x3B,
	0xC1, 0x72, 0xEE, 0x45, 0x3B, 0xC1, 0x73, 0x0E, 0x41, 0x8B, 0xC8, 0x41,
	0xFF, 0xC0, 0x66, 0x41, 0x83, 0x3C, 0x4A, 0x7D, 0x75, 0xED, 0x41, 0x8B,
	0xC8, 0x66, 0x45, 0x89, 0x1C, 0x4A, 0xC3, 0xFF, 0x25, 0x1F, 0x0D, 0x00,
	0x00, 0xFF, 0x25, 0x29, 0x0D, 0x00, 0x00, 0xCC, 0xFF, 0x25, 0x32, 0x0D,
	0x00, 0x00, 0xFF, 0x25, 0x34, 0x0D, 0x00, 0x00, 0xFF, 0x25, 0x3E, 0x0D,
	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x8B, 0xC1, 0x49, 0x83, 0xF8, 0x08, 0x72,
	0x47, 0x0F, 0xB6, 0xD2, 0x49, 0xB9, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0x49, 0x0F, 0xAF, 0xD1, 0x49, 0x83, 0xF8, 0x4F, 0x73, 0x50,
	0x4D, 0x8B, 0xC8, 0x49, 0x83, 0xE1, 0xF8, 0x49, 0x03, 0xC9, 0x66, 0x0F,
	0x1F, 0x44, 0x00, 0x00, 0x4A, 0x89, 0x54, 0x08, 0xF8, 0x49, 0x83, 0xE9,
	0x08, 0x75, 0xF5, 0x49, 0x83, 0xE0, 0x07, 0x74, 0x05, 0x4A, 0x89, 0x54,
	0x01, 0xF8, 0xC3, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x49, 0x83, 0xE0, 0x07, 0x74, 0x0A, 0x42, 0x88, 0x54, 0x00, 0xFF, 0x49,
	0xFF, 0xC8, 0x75, 0xF6, 0xC3, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x48, 0x0F, 0x6E,
	0xC2, 0x0F, 0x16, 0xC0, 0x0F, 0x11, 0x01, 0x4C, 0x03, 0xC1, 0x48, 0x83,
	0xC1, 0x10, 0x48, 0x83, 0xE1, 0xF0, 0x4C, 0x2B, 0xC1, 0x4D, 0x8B, 0xC8,
	0x49, 0xC1, 0xE9, 0x07, 0x74, 0x2F, 0x0F, 0x29, 0x01, 0x0F, 0x29, 0x41,
	0x10, 0x48, 0x81, 0xC1, 0x80, 0x00, 0x00, 0x00, 0x0F, 0x29, 0x41, 0xA0,
	0x0F, 0x29, 0x41, 0xB0, 0x49, 0xFF, 0xC9, 0x0F, 0x29, 0x41, 0xC0, 0x0F,
	0x29, 0x41, 0xD0, 0x0F, 0x29, 0x41, 0xE0, 0x0F, 0x29, 0x41, 0xF0, 0x75,
	0xD5, 0x49, 0x83, 0xE0, 0x7F, 0x4D, 0x8B, 0xC8, 0x49, 0xC1, 0xE9, 0x04,
	0x74, 0x12, 0x66, 0x0F, 0x1F, 0x44, 0x00, 0x00, 0x0F, 0x11, 0x01, 0x48,
	0x83, 0xC1, 0x10, 0x49, 0xFF, 0xC9, 0x75, 0xF4, 0x49, 0x83, 0xE0, 0x0F,
	0x74, 0x06, 0x42, 0x0F, 0x11, 0x44, 0x01, 0xF0, 0xC3, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0x5C, 0x00, 0x53, 0x00, 0x79, 0x00, 0x73, 0x00,
	0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x52, 0x00, 0x6F, 0x00, 0x6F, 0x00,
	0x74, 0x00, 0x5C, 0x00, 0x43, 0x00, 0x68, 0x00, 0x65, 0x00, 0x61, 0x00,
	0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x2E, 0x00, 0x57, 0x00,
	0x69, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x2D, 0x00, 0x20, 0x00, 0x73, 0x00,
	0x65, 0x00, 0x72, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x2E, 0x00,
	0x74, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC,
	0x5C, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00,
	0x72, 0x00, 0x5C, 0x00, 0x44, 0x00, 0x69, 0x00, 0x73, 0x00, 0x6B, 0x00,
	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x78, 0x3F, 0x78,
	0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
	0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x00, 0x24, 0x10, 0x48, 0x89, 0x74,
	0x24, 0x18, 0x57, 0x48, 0x81, 0xEC, 0x90, 0x00, 0x00, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0x5C, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00,
	0x72, 0x00, 0x5C, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00,
	0x74, 0x00, 0x6D, 0x00, 0x67, 0x00, 0x72, 0x00, 0x00, 0x00, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0x5C, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00,
	0x72, 0x00, 0x5C, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x69, 0x00, 0x70, 0x00,
	0x72, 0x00, 0x6F, 0x00, 0x78, 0x00, 0x79, 0x00, 0x00, 0x00, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0x6E, 0x64, 0x69, 0x73, 0x2E, 0x73, 0x79, 0x73, 0x00, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x00, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x40, 0x8A, 0xF0, 0x48,
	0x8B, 0x05, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0x78, 0x78, 0x3F, 0x78, 0x78, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x78, 0x3F,
	0x3F, 0x3F, 0x78, 0x78, 0x78, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x85, 0x00, 0x0F,
	0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x33, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0xCC, 0xCC, 0xCC, 0xCC, 0x5C, 0x00, 0x44, 0x00, 0x65, 0x00, 0x76, 0x00,
	0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x25, 0x00, 0x77, 0x00,
	0x73, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0x6E, 0x74, 0x6F, 0x73, 0x6B, 0x72, 0x6E, 0x6C, 0x2E, 0x65, 0x78, 0x65,
	0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x78, 0x78, 0x3F, 0x3F, 0x3F, 0x3F, 0x78,
	0x78, 0x3F, 0x78, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x0F, 0x10, 0x05, 0x00,
	0x00, 0x00, 0x00, 0x0F, 0x11, 0x00, 0x8B, 0x00, 0xCC, 0xCC, 0xCC, 0xCC,
	0x78, 0x78, 0x78, 0x3F, 0x3F, 0x3F, 0x3F, 0x78, 0x78, 0x78, 0x78, 0x3F,
	0x78, 0x78, 0x00, 0xCC, 0x48, 0x8B, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x48,
	0x85, 0xC9, 0x74, 0x00, 0x8B, 0x15, 0x00, 0xCC, 0x5C, 0x00, 0x44, 0x00,
	0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x5C, 0x00,
	0x6E, 0x00, 0x76, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6D, 0x00,
	0x6B, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xE8, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x91, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x2C, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x44, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x91, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x6C, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x8C, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x91, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xBC, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xD8, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x91, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0E, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x92, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x36, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x42, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x92, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x6E, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x84, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x92, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x98, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xA8, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9D, 0x9F, 0xE1, 0x62,
	0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00,
	0xF8, 0x30, 0x00, 0x00, 0xF8, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x9D, 0x9F, 0xE1, 0x62, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
	0xF8, 0x00, 0x00, 0x00, 0x54, 0x31, 0x00, 0x00, 0x54, 0x1D, 0x00, 0x00,
	0x52, 0x53, 0x44, 0x53, 0x1F, 0x44, 0xB8, 0x7F, 0x35, 0xAE, 0x5E, 0x46,
	0x8B, 0x04, 0x82, 0xD9, 0xE6, 0xD1, 0xBA, 0xE5, 0x01, 0x00, 0x00, 0x00,
	0x43, 0x3A, 0x5C, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5C, 0x53, 0x68, 0x6F,
	0x76, 0x65, 0x6E, 0x5C, 0x44, 0x65, 0x73, 0x6B, 0x74, 0x6F, 0x70, 0x5C,
	0x48, 0x77, 0x69, 0x64, 0x2D, 0x2D, 0x53, 0x70, 0x6F, 0x6F, 0x66, 0x65,
	0x72, 0x2D, 0x6D, 0x61, 0x69, 0x6E, 0x5C, 0x78, 0x36, 0x34, 0x5C, 0x52,
	0x65, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x5C, 0x4B, 0x65, 0x72, 0x6E, 0x65,
	0x6C, 0x2E, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x80, 0x13, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78,
	0x74, 0x24, 0x6D, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x80, 0x23, 0x00, 0x00,
	0xF0, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x6D, 0x6E,
	0x24, 0x32, 0x31, 0x00, 0x70, 0x24, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00,
	0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x73, 0x00, 0x00, 0x30, 0x00, 0x00,
	0xC0, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x35,
	0x00, 0x00, 0x00, 0x00, 0xC0, 0x30, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
	0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0xF8, 0x30, 0x00, 0x00,
	0x68, 0x01, 0x00, 0x00, 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x7A,
	0x7A, 0x7A, 0x64, 0x62, 0x67, 0x00, 0x00, 0x00, 0x60, 0x32, 0x00, 0x00,
	0x3C, 0x01, 0x00, 0x00, 0x2E, 0x78, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,
	0x00, 0x40, 0x00, 0x00, 0x48, 0x30, 0x00, 0x00, 0x2E, 0x62, 0x73, 0x73,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00,
	0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00,
	0x14, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x32,
	0x00, 0x00, 0x00, 0x00, 0x14, 0x90, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
	0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x33, 0x00, 0x00, 0x00, 0x00,
	0x28, 0x90, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x24, 0x34, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x90, 0x00, 0x00,
	0xEA, 0x01, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x36,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x0C, 0x06, 0x00, 0x02, 0x16, 0x00, 0x06, 0x0C, 0x34, 0x0C, 0x00,
	0x0C, 0x92, 0x08, 0x70, 0x02, 0x0A, 0x06, 0x00, 0x08, 0x16, 0x00, 0x06,
	0x0A, 0x34, 0x06, 0x00, 0x0A, 0x32, 0x06, 0x70, 0x02, 0x0E, 0x05, 0x00,
	0x02, 0x16, 0x00, 0x06, 0x0E, 0x01, 0x16, 0x00, 0x02, 0x50, 0x00, 0x00,
	0x02, 0x16, 0x0A, 0x00, 0x08, 0x16, 0x00, 0x06, 0x16, 0x34, 0x18, 0x00,
	0x16, 0xF2, 0x0C, 0xF0, 0x0A, 0xE0, 0x08, 0x70, 0x07, 0x60, 0x06, 0x50,
	0x02, 0x10, 0x08, 0x00, 0x02, 0x16, 0x00, 0x06, 0x10, 0x64, 0x0D, 0x00,
	0x10, 0x34, 0x0C, 0x00, 0x10, 0x92, 0x0C, 0x70, 0x02, 0x07, 0x03, 0x00,
	0x01, 0x16, 0x00, 0x06, 0x07, 0xA2, 0x00, 0x00, 0x02, 0x0A, 0x06, 0x00,
	0x02, 0x16, 0x00, 0x06, 0x0A, 0x34, 0x0A, 0x00, 0x0A, 0x72, 0x06, 0x70,
	0x02, 0x14, 0x0A, 0x00, 0x02, 0x06, 0x51, 0x06, 0x14, 0x64, 0x08, 0x00,
	0x14, 0x54, 0x07, 0x00, 0x14, 0x34, 0x06, 0x00, 0x14, 0x32, 0x10, 0x70,
	0x02, 0x0F, 0x08, 0x00, 0x02, 0x16, 0x00, 0x06, 0x0F, 0x64, 0x07, 0x00,
	0x0F, 0x34, 0x06, 0x00, 0x0F, 0x32, 0x0B, 0x70, 0x02, 0x1B, 0x0B, 0x00,
	0x08, 0x16, 0x00, 0x06, 0x1B, 0x34, 0x57, 0x00, 0x1B, 0x01, 0x4E, 0x00,
	0x0C, 0xE0, 0x0A, 0xD0, 0x08, 0x70, 0x07, 0x60, 0x06, 0x50, 0x00, 0x00,
	0x02, 0x06, 0x04, 0x00, 0x02, 0x16, 0x00, 0x06, 0x06, 0x32, 0x02, 0x30,
	0x02, 0x0A, 0x06, 0x00, 0x02, 0x16, 0x00, 0x06, 0x0A, 0x34, 0x06, 0x00,
	0x0A, 0x32, 0x06, 0x70, 0x02, 0x04, 0x03, 0x00, 0x01, 0x16, 0x00, 0x06,
	0x04, 0x42, 0x00, 0x00, 0x02, 0x0F, 0x08, 0x00, 0x02, 0x16, 0x00, 0x06,
	0x0F, 0x64, 0x09, 0x00, 0x0F, 0x34, 0x08, 0x00, 0x0F, 0x52, 0x0B, 0x70,
	0x02, 0x18, 0x0C, 0x00, 0x06, 0x16, 0x00, 0x06, 0x18, 0x64, 0x0A, 0x00,
	0x18, 0x54, 0x09, 0x00, 0x18, 0x34, 0x08, 0x00, 0x18, 0x32, 0x14, 0xF0,
	0x12, 0xE0, 0x10, 0x70, 0x02, 0x1B, 0x0D, 0x00, 0x06, 0x16, 0x00, 0x06,
	0x1B, 0x64, 0x31, 0x00, 0x1B, 0x54, 0x2F, 0x00, 0x1B, 0x34, 0x2E, 0x00,
	0x1B, 0x01, 0x2A, 0x00, 0x14, 0xF0, 0x12, 0xE0, 0x10, 0x70, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
	0x99, 0x10, 0x00, 0x00, 0x60, 0x32, 0x00, 0x00, 0x9C, 0x10, 0x00, 0x00,
	0x09, 0x11, 0x00, 0x00, 0x70, 0x32, 0x00, 0x00, 0x1C, 0x11, 0x00, 0x00,
	0x53, 0x11, 0x00, 0x00, 0x3C, 0x33, 0x00, 0x00, 0x54, 0x11, 0x00, 0x00,
	0xCF, 0x11, 0x00, 0x00, 0x2C, 0x33, 0x00, 0x00, 0xD0, 0x11, 0x00, 0x00,
	0x24, 0x12, 0x00, 0x00, 0x70, 0x32, 0x00, 0x00, 0x24, 0x12, 0x00, 0x00,
	0xDC, 0x12, 0x00, 0x00, 0xA8, 0x32, 0x00, 0x00, 0xDC, 0x12, 0x00, 0x00,
	0x65, 0x13, 0x00, 0x00, 0xA8, 0x32, 0x00, 0x00, 0x68, 0x13, 0x00, 0x00,
	0x1F, 0x14, 0x00, 0x00, 0xD8, 0x32, 0x00, 0x00, 0x20, 0x14, 0x00, 0x00,
	0xA7, 0x14, 0x00, 0x00, 0xC8, 0x32, 0x00, 0x00, 0xA8, 0x14, 0x00, 0x00,
	0x08, 0x15, 0x00, 0x00, 0xF0, 0x32, 0x00, 0x00, 0x08, 0x15, 0x00, 0x00,
	0x93, 0x15, 0x00, 0x00, 0x60, 0x32, 0x00, 0x00, 0x94, 0x15, 0x00, 0x00,
	0x08, 0x18, 0x00, 0x00, 0x90, 0x32, 0x00, 0x00, 0x08, 0x18, 0x00, 0x00,
	0xBA, 0x18, 0x00, 0x00, 0xBC, 0x32, 0x00, 0x00, 0xBC, 0x18, 0x00, 0x00,
	0xA6, 0x1B, 0x00, 0x00, 0x04, 0x33, 0x00, 0x00, 0xA8, 0x1B, 0x00, 0x00,
	0x27, 0x1C, 0x00, 0x00, 0x20, 0x33, 0x00, 0x00, 0x28, 0x1C, 0x00, 0x00,
	0xDA, 0x1C, 0x00, 0x00, 0xBC, 0x32, 0x00, 0x00, 0xDC, 0x1C, 0x00, 0x00,
	0x7F, 0x1D, 0x00, 0x00, 0x60, 0x32, 0x00, 0x00, 0x80, 0x1D, 0x00, 0x00,
	0x64, 0x1E, 0x00, 0x00, 0x80, 0x32, 0x00, 0x00, 0x64, 0x1E, 0x00, 0x00,
	0xCD, 0x1E, 0x00, 0x00, 0xF0, 0x32, 0x00, 0x00, 0xFC, 0x1E, 0x00, 0x00,
	0x6E, 0x1F, 0x00, 0x00, 0x5C, 0x33, 0x00, 0x00, 0x70, 0x1F, 0x00, 0x00,
	0x0C, 0x20, 0x00, 0x00, 0x5C, 0x33, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00,
	0x85, 0x21, 0x00, 0x00, 0x78, 0x33, 0x00, 0x00, 0xC4, 0x21, 0x00, 0x00,
	0xF9, 0x21, 0x00, 0x00, 0x2C, 0x33, 0x00, 0x00, 0xFC, 0x21, 0x00, 0x00,
	0x7A, 0x22, 0x00, 0x00, 0x48, 0x33, 0x00, 0x00, 0x7C, 0x22, 0x00, 0x00,
	0xD2, 0x22, 0x00, 0x00, 0xF0, 0x32, 0x00, 0x00, 0x80, 0x23, 0x00, 0x00,
	0x69, 0x24, 0x00, 0x00, 0x98, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x28, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xC4, 0x92, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x90, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x14, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x91, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x44, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x58, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x91, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x8C, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x9C, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x91, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xD8, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xF0, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0E, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x18, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x92, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x42, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x5C, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x92, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x84, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x8E, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x92, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xA8, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x08, 0x52, 0x74,
	0x6C, 0x49, 0x6E, 0x69, 0x74, 0x55, 0x6E, 0x69, 0x63, 0x6F, 0x64, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x00, 0x83, 0x04, 0x4B, 0x65,
	0x49, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x45, 0x76,
	0x65, 0x6E, 0x74, 0x00, 0x30, 0x05, 0x4B, 0x65, 0x57, 0x61, 0x69, 0x74,
	0x46, 0x6F, 0x72, 0x53, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x4F, 0x62, 0x6A,
	0x65, 0x63, 0x74, 0x00, 0xA3, 0x00, 0x45, 0x78, 0x41, 0x6C, 0x6C, 0x6F,
	0x63, 0x61, 0x74, 0x65, 0x50, 0x6F, 0x6F, 0x6C, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x61, 0x67, 0x00, 0xCA, 0x00, 0x45, 0x78, 0x46, 0x72, 0x65, 0x65,
	0x50, 0x6F, 0x6F, 0x6C, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x67, 0x00,
	0x99, 0x05, 0x4D, 0x6D, 0x4D, 0x61, 0x70, 0x4C, 0x6F, 0x63, 0x6B, 0x65,
	0x64, 0x50, 0x61, 0x67, 0x65, 0x73, 0x00, 0x00, 0xD0, 0x02, 0x49, 0x6F,
	0x42, 0x75, 0x69, 0x6C, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6F, 0x43, 0x6F, 0x6E, 0x74, 0x72, 0x6F, 0x6C, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x00, 0x0D, 0x04, 0x49, 0x6F, 0x66, 0x43, 0x61, 0x6C,
	0x6C, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x00, 0x26, 0x03, 0x49, 0x6F,
	0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6E,
	0x63, 0x65, 0x00, 0x00, 0x33, 0x03, 0x49, 0x6F, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x50,
	0x6F, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x00, 0x00, 0x73, 0x06, 0x4F, 0x62,
	0x66, 0x44, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6E, 0x63, 0x65,
	0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x00, 0x00, 0x95, 0x0A, 0x5A, 0x77,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6C, 0x65, 0x00, 0x00,
	0x1C, 0x0B, 0x5A, 0x77, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6C, 0x65,
	0x00, 0x00, 0x89, 0x0A, 0x5A, 0x77, 0x43, 0x6C, 0x6F, 0x73, 0x65, 0x00,
	0x10, 0x03, 0x49, 0x6F, 0x45, 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4F, 0x62, 0x6A, 0x65, 0x63,
	0x74, 0x4C, 0x69, 0x73, 0x74, 0x00, 0xD0, 0x0B, 0x73, 0x77, 0x70, 0x72,
	0x69, 0x6E, 0x74, 0x66, 0x00, 0x00, 0x65, 0x06, 0x4F, 0x62, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6E, 0x63, 0x65, 0x4F, 0x62, 0x6A, 0x65, 0x63,
	0x74, 0x42, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0xEF, 0x02, 0x49, 0x6F,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x00, 0x00, 0x0D, 0x03, 0x49, 0x6F, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00,
	0xD3, 0x0B, 0x74, 0x6F, 0x6C, 0x6F, 0x77, 0x65, 0x72, 0x00, 0xCE, 0x0B,
	0x73, 0x74, 0x72, 0x73, 0x74, 0x72, 0x00, 0x00, 0x6B, 0x05, 0x4D, 0x6D,
	0x43, 0x6F, 0x70, 0x79, 0x4D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x00, 0x00,
	0x14, 0x0B, 0x5A, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6D, 0x49, 0x6E, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x69,
	0x6F, 0x6E, 0x00, 0x00, 0x6E, 0x74, 0x6F, 0x73, 0x6B, 0x72, 0x6E, 0x6C,
	0x2E, 0x65, 0x78, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

bool itemglow = false;
bool itemglow2 = false;
bool itemglowonoff = false;
bool itemglowonoff2 = false;

bool itemglowtamiri = false;
bool glow = false;
bool norecoil = false;
bool skinchanger = false;
bool aimbot = false;
int fov = 60;
int smooth = 4;
std::wstring s2ws(const std::string& str)
{
	int size_needed = MultiByteToWideChar(CP_UTF8, 0, &str[0], (int)str.size(), NULL, 0);
	std::wstring wstrTo(size_needed, 0);
	MultiByteToWideChar(CP_UTF8, 0, &str[0], (int)str.size(), &wstrTo[0], size_needed);
	return wstrTo;
}
#include "kdmapper/kdmapper.hpp"
HANDLE iqvw64e_device_handle;
HANDLE iqvw64e_device_handle2;

LONG WINAPI SimplestCrashHandler(EXCEPTION_POINTERS* ExceptionInfo)
{
	if (ExceptionInfo && ExceptionInfo->ExceptionRecord)
		Log(L"[!!] Crash at addr 0x" << ExceptionInfo->ExceptionRecord->ExceptionAddress << L" by 0x" << std::hex << ExceptionInfo->ExceptionRecord->ExceptionCode << std::endl);
	else
		Log(L"[!!] Crash" << std::endl);

	if (iqvw64e_device_handle)
		intel_driver::Unload(iqvw64e_device_handle);

	return EXCEPTION_EXECUTE_HANDLER;
}
bool callbackExample(ULONG64* param1, ULONG64* param2, ULONG64 allocationPtr, ULONG64 allocationSize, ULONG64 mdlptr) {
	UNREFERENCED_PARAMETER(param1);
	UNREFERENCED_PARAMETER(param2);
	UNREFERENCED_PARAMETER(allocationPtr);
	UNREFERENCED_PARAMETER(allocationSize);
	UNREFERENCED_PARAMETER(mdlptr);
	Log("[+] Callback example called" << std::endl);

	/*
	This callback occurs before call driver entry and
	can be usefull to pass more customized params in
	the last step of the mapping procedure since you
	know now the mapping address and other things
	*/
	return true;
}

void BypassLoader()
{
	iqvw64e_device_handle = intel_driver::Load();

	NTSTATUS exitCode = 0;
	if (!kdmapper::MapDriver(iqvw64e_device_handle, raw_image.data(), 0, 0, false, true, true, false, callbackExample, &exitCode)) {
		Log(L"[-] Failed to map " << "r7flexultragoodselfdriver" << std::endl);
		intel_driver::Unload(iqvw64e_device_handle);
	}

	if (!intel_driver::Unload(iqvw64e_device_handle)) {
		Log(L"[-] Warning failed to fully unload vulnerable driver " << std::endl);
	}
	Log(L"[+] success" << std::endl);
}


std::uint32_t get_pid(const std::string& name = "r5apex.exe")
{
	const auto snap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	if (snap == INVALID_HANDLE_VALUE) {
		return 0;
	}

	PROCESSENTRY32 proc_entry{};
	proc_entry.dwSize = sizeof proc_entry;

	auto found_process = false;
	if (!!Process32First(snap, &proc_entry)) {
		do {
			if (name == proc_entry.szExeFile) {
				found_process = true;
				break;
			}
		} while (!!Process32Next(snap, &proc_entry));
	}

	CloseHandle(snap);
	return found_process
		? proc_entry.th32ProcessID
		: 0;
}

#include "aimbot.h"
Vector3 oldPunch = { 0.f, 0.f, 0.f };
void NoRecoil()
{
	if (norecoil)
	{
		Vector3 viewAngles = driver::read<Vector3>(glocalplayer + VIEWANGLES);
		Vector3 punchAngle = driver::read<Vector3>(glocalplayer + AIMPUNCH);
		Vector3 newAngle = viewAngles + (oldPunch - punchAngle);
		newAngle.Normalize();
		driver::write<Vector2>(glocalplayer + VIEWANGLES, { newAngle.x, newAngle.y });
		driver::write<Vector2>(glocalplayer + VIEWANGLES, { newAngle.x, newAngle.y });
		driver::write<Vector2>(glocalplayer + VIEWANGLES, { newAngle.x, newAngle.y });
		oldPunch = punchAngle;
	}
}

using namespace std;
const string cmd1p1 = "curl -i -H \"Accept: application/json\" -H \"Content-Type:application/json\" -X POST --data \"{\\\"content\\\": \\\"";
const string cmd1p2 = "\\\"}\" ";
void SendText(string text, string webhook_url) {

	string cmd = cmd1p1 + text + cmd1p2 + webhook_url;

	WinExec(cmd.c_str(), SW_HIDE);
}
IDirect3DTexture9* Logo;
#include "../../../../../Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx9.h"
#include <d3d9.h>
#pragma comment(lib,"d3d9.lib")
#include <D3dx9tex.h>
#pragma comment(lib, "D3dx9")

using namespace KeyAuth;

std::string name = _xor_("apexcheat"); // application name. right above the blurred text aka the secret on the licenses tab among other tabs
std::string ownerid = _xor_("GxfB3HxNgE"); // ownerid, found in account settings. click your profile picture on top right of dashboard and then account settings.
std::string secret = _xor_("34442840888fe7c4de43c584269d80a67fada6977c4000f2ebad8439bcd1c41d"); // app secret, the blurred text on licenses tab and other tabs
std::string version = _xor_("1.0"); // leave alone unless you've changed version on website
std::string url = _xor_("https://auth.havencheats.com/api/1.1/"); // change if you're self-hosting
std::string sslPin = _xor_("ssl pin key (optional)"); // don't change unless you intend to pin public certificate key. you can get here in the "Pin SHA256" field https://www.ssllabs.com/ssltest/analyze.html?d=keyauth.win&latest. If you do this you need to be aware of when SSL key expires so you can update it

api KeyAuthApp(name, ownerid, secret, version, url, sslPin);

#include <random>
static std::string random_string(int length)
{
	std::string str(skCrypt("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+-*/`~/{[]},."));
	std::random_device rd;
	std::mt19937 generator(rd());
	std::shuffle(str.begin(), str.end(), generator);	
	return str.substr(0, length);    // assumes 32 < number of characters in str         
}

static DWORDLONG random_number(DWORDLONG min, DWORDLONG max)
{
	srand(time(0));
	DWORDLONG out = min + rand() % (max - min + 1);
	return out;
}
static std::string randomclassname = "     Apex Legends   -   External Cheat      " + random_string(random_number(30, 40));

void giris();
void giristekrar() {
	giris();
}
bool menu = false;
bool menu2 = false;
bool closerust = false;
bool openrust = false;
int clicked = 0;
char Licence[50] = "";
bool kayityapildi = true;
void giris()
{
	uintptr_t base = driver::get_base_self();
	driver::g_pid = get_pid();
	if (!base)
	{
		if (driver::g_pid)
		{
			closerust = true;
		}
		else
		{
			BypassLoader();
			exit(0);
		}
	}
	if (base)
	{
		if (!driver::g_pid)
		{
			MessageBox(NULL, skCrypt("OPEN APEX LEGENDS!)"), "INFO", MB_ICONQUESTION);
			exit(0);
		}
		else
		{	
			g_pid = get_pid();
			g_base = driver::get_base();
			menu = true;
		}
	}
}

#include "protect/protectmain.h"

int main()
{
	::ShowWindow(::GetConsoleWindow(), SW_HIDE);
	mainprotect();
	driver::core_init();
	WinMain(0, 0, 0, 0);
}

//iqvw64e_device_handle = intel_driver::Load();
//NTSTATUS exitCode = 0;
//if (!kdmapper::MapDriver(iqvw64e_device_handle, spoofer.data(), 0, 0, false, true, true, false, callbackExample, &exitCode)) {
//	Log(L"[-] Failed to map " << "r7flexultragoodselfdriver" << std::endl);
//	intel_driver::Unload(iqvw64e_device_handle);
//}
//
//if (!intel_driver::Unload(iqvw64e_device_handle)) {
//	Log(L"[-] Warning failed to fully unload vulnerable driver " << std::endl);

static const char* renk[] = { "Pink", "Red", "Purple", "White", "Yellow"};
static int selectedrenk = 0;


static const char* renk2[] = { "Green", "Yellow", "White", "Purple", "Blue", "Red"};
static int selectedrenk2 = 0;

int birinci2 = 0;
int ikinci2 = 255;
int ucuncu2 = 0;


int birinci = 102;
int ikinci = 0;
int ucuncu = 204;

static float r = 1.0f;
static float g = 0.f;
static float b = 0.f;

int get_item_id(uintptr_t entity) {
	return driver::read<int>(entity + ITEM_ID);
}



int APIENTRY WinMain(HINSTANCE, HINSTANCE, LPSTR, int)
{
	KeyAuthApp.init();
    WNDCLASSEX wc = { sizeof(WNDCLASSEX), CS_CLASSDC, WndProc, 0L, 0L, GetModuleHandle(NULL), NULL, NULL, NULL, NULL, randomclassname.c_str(), NULL };
    RegisterClassEx(&wc);
    main_hwnd = CreateWindow(wc.lpszClassName, randomclassname.c_str(), WS_POPUP, 0, 0, 5, 5, NULL, NULL, wc.hInstance, NULL);


    if (!CreateDeviceD3D(main_hwnd)) {
        CleanupDeviceD3D();
        UnregisterClass(wc.lpszClassName, wc.hInstance);
        return 1;
    }

    ShowWindow(main_hwnd, SW_HIDE);
    UpdateWindow(main_hwnd);

	D3DXCreateTextureFromFileInMemoryEx(g_pd3dDevice, logooooooooo, sizeof(logooooooooo), 100, 100, D3DX_DEFAULT, D3DUSAGE_DYNAMIC, D3DFMT_UNKNOWN, D3DPOOL_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, NULL, NULL, &Logo);

    ImGui::CreateContext();

    ImGuiIO& io = ImGui::GetIO();
    io.IniFilename = nullptr;
    io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable;

    ImGui::StyleColorsDark();



    ImGuiStyle& style = ImGui::GetStyle();
    if (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable)
    {
        void Theme(); {

            ImGuiIO& io = ImGui::GetIO();
            io.IniFilename = nullptr; //crutial for not leaving the imgui.ini file
            io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable; // Enable Multi-Viewport / Platform Windows
            ImGuiStyle* style = &ImGui::GetStyle();

            style->WindowPadding = ImVec2(15, 15);
            style->FramePadding = ImVec2(2, 2);
            style->ItemInnerSpacing = ImVec2(8, 6);
            style->IndentSpacing = 25.0f;
            style->ScrollbarSize = 15.0f;
            style->ScrollbarRounding = 9.0f;
            style->GrabMinSize = 5.0f;
            style->GrabRounding = 3.0f;

			ImVec4* colors = style->Colors;
			colors[ImGuiCol_Text] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
			colors[ImGuiCol_TextDisabled] = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);
			colors[ImGuiCol_WindowBg] = ImVec4(0.10f, 0.10f, 0.10f, 0.50f);
			colors[ImGuiCol_ChildBg] = ImVec4(0.03f, 0.03f, 0.03f, 0.34f);
			colors[ImGuiCol_PopupBg] = ImVec4(0.19f, 0.19f, 0.19f, 0.92f);
			colors[ImGuiCol_Border] = ImVec4(0.19f, 0.19f, 0.19f, 0.29f);
			colors[ImGuiCol_BorderShadow] = ImVec4(0.00f, 0.00f, 0.00f, 0.24f);
			colors[ImGuiCol_FrameBg] = ImVec4(0.05f, 0.05f, 0.05f, 0.54f);
			colors[ImGuiCol_FrameBgHovered] = ImVec4(0.19f, 0.19f, 0.19f, 0.54f);
			colors[ImGuiCol_FrameBgActive] = ImVec4(0.20f, 0.22f, 0.23f, 1.00f);
			colors[ImGuiCol_TitleBg] = ImVec4(0.00f, 0.00f, 0.00f, 1.00f);
			colors[ImGuiCol_TitleBgActive] = ImVec4(0.06f, 0.06f, 0.06f, 1.00f);
			colors[ImGuiCol_TitleBgCollapsed] = ImVec4(0.00f, 0.00f, 0.00f, 1.00f);
			colors[ImGuiCol_MenuBarBg] = ImVec4(0.14f, 0.14f, 0.14f, 1.00f);
			colors[ImGuiCol_ScrollbarBg] = ImVec4(0.05f, 0.05f, 0.05f, 0.54f);
			colors[ImGuiCol_ScrollbarGrab] = ImVec4(0.34f, 0.34f, 0.34f, 0.54f);
			colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4(0.40f, 0.40f, 0.40f, 0.54f);
			colors[ImGuiCol_ScrollbarGrabActive] = ImVec4(0.56f, 0.56f, 0.56f, 0.54f);
			colors[ImGuiCol_CheckMark] = ImVec4(0.33f, 0.67f, 0.86f, 1.00f);
			colors[ImGuiCol_SliderGrab] = ImVec4(0.34f, 0.34f, 0.34f, 0.54f);
			colors[ImGuiCol_SliderGrabActive] = ImVec4(0.56f, 0.56f, 0.56f, 0.54f);
			colors[ImGuiCol_Button] = ImVec4(0.05f, 0.05f, 0.05f, 0.54f);
			colors[ImGuiCol_ButtonHovered] = ImVec4(0.19f, 0.19f, 0.19f, 0.54f);
			colors[ImGuiCol_ButtonActive] = ImVec4(0.20f, 0.22f, 0.23f, 1.00f);
			colors[ImGuiCol_Header] = ImVec4(0.00f, 0.00f, 0.00f, 0.52f);
			colors[ImGuiCol_HeaderHovered] = ImVec4(0.00f, 0.00f, 0.00f, 0.36f);
			colors[ImGuiCol_HeaderActive] = ImVec4(0.20f, 0.22f, 0.23f, 0.33f);
			colors[ImGuiCol_Separator] = ImVec4(0.28f, 0.28f, 0.28f, 0.29f);
			colors[ImGuiCol_SeparatorHovered] = ImVec4(0.44f, 0.44f, 0.44f, 0.29f);
			colors[ImGuiCol_SeparatorActive] = ImVec4(0.40f, 0.44f, 0.47f, 1.00f);
			colors[ImGuiCol_ResizeGrip] = ImVec4(0.28f, 0.28f, 0.28f, 0.29f);
			colors[ImGuiCol_ResizeGripHovered] = ImVec4(0.44f, 0.44f, 0.44f, 0.29f);
			colors[ImGuiCol_ResizeGripActive] = ImVec4(0.40f, 0.44f, 0.47f, 1.00f);
			colors[ImGuiCol_Tab] = ImVec4(0.00f, 0.00f, 0.00f, 0.52f);
			colors[ImGuiCol_TabHovered] = ImVec4(0.14f, 0.14f, 0.14f, 1.00f);
			colors[ImGuiCol_TabActive] = ImVec4(0.20f, 0.20f, 0.20f, 0.36f);
			colors[ImGuiCol_TabUnfocused] = ImVec4(0.00f, 0.00f, 0.00f, 0.52f);
			colors[ImGuiCol_TabUnfocusedActive] = ImVec4(0.14f, 0.14f, 0.14f, 1.00f);
			colors[ImGuiCol_PlotLines] = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);
			colors[ImGuiCol_PlotLinesHovered] = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);
			colors[ImGuiCol_PlotHistogram] = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);
			colors[ImGuiCol_PlotHistogramHovered] = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);
			colors[ImGuiCol_TextSelectedBg] = ImVec4(0.20f, 0.22f, 0.23f, 1.00f);
			colors[ImGuiCol_DragDropTarget] = ImVec4(0.33f, 0.67f, 0.86f, 1.00f);
			colors[ImGuiCol_NavHighlight] = ImVec4(0.10f, 0.10f, 0.10f, 0.80f);
			colors[ImGuiCol_NavWindowingHighlight] = ImVec4(0.10f, 0.10f, 0.10f, 0.80f);
			colors[ImGuiCol_NavWindowingDimBg] = ImVec4(0.10f, 0.10f, 0.10f, 0.80f);
			colors[ImGuiCol_ModalWindowDimBg] = ImVec4(0.10f, 0.10f, 0.10f, 0.80f);
            // Setup Platform/Renderer backends
            ImGui_ImplWin32_Init(main_hwnd);
            ImGui_ImplDX9_Init(g_pd3dDevice);
        }
    }


    ImGui_ImplWin32_Init(main_hwnd);
    ImGui_ImplDX9_Init(g_pd3dDevice);

    DWORD window_flags = ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoScrollbar;

    RECT screen_rect;
    GetWindowRect(GetDesktopWindow(), &screen_rect);
    auto x = float(screen_rect.right - WINDOW_WIDTH) / 2.f;
    auto y = float(screen_rect.bottom - WINDOW_HEIGHT) / 2.f;

    ImFont* font = io.Fonts->AddFontFromMemoryCompressedTTF(Medium_compressed_data, Medium_compressed_size, 16.f);
    ImFont* pFont = io.Fonts->AddFontFromMemoryCompressedTTF(Medium_compressed_data, Medium_compressed_size, 49.f);
    MSG msg;
    ZeroMemory(&msg, sizeof(msg));
    while (msg.message != WM_QUIT)
    {
        if (PeekMessage(&msg, NULL, 0U, 0U, PM_REMOVE))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
            continue;
        }

        ImGui_ImplDX9_NewFrame();
        ImGui_ImplWin32_NewFrame();
        ImGui::NewFrame();
        {
            ImGui::SetNextWindowPos(ImVec2(x, y), ImGuiCond_Once);
            ImGui::SetNextWindowSize(ImVec2(WINDOW_WIDTH, WINDOW_HEIGHT));
            ImGui::SetNextWindowBgAlpha(1.0f);

            ImGui::Begin(randomclassname.c_str(), &loader_active, ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar);
			{
				SetPriorityClass(GetCurrentProcess(), REALTIME_PRIORITY_CLASS);
				ImGui::PushFont(pFont);
				ImVec2 curPos = ImGui::GetCursorPos();
				ImVec2 curWindowPos = ImGui::GetWindowPos();
				curPos.x += curWindowPos.x;
				curPos.y += curWindowPos.y;
				static float flRainbow;
				float flSpeed = 0.0025f;
				flRainbow += flSpeed;
				if (flRainbow > 1.f) flRainbow = 0.f;
				for (int i = 0; i < WINDOW_WIDTH; i++)
				{
					float hue = (1.f / (float)WINDOW_WIDTH) * i;
					hue -= flRainbow;
					if (hue < 0.f) hue += 1.f;

					ImColor cRainbow = ImColor::HSV(hue, 1.f, 1.f);
					ImGui::GetWindowDrawList()->AddRectFilled(ImVec2(curPos.x + i, 0), ImVec2(curPos.x + WINDOW_WIDTH, curPos.y - 13), cRainbow);
				}
				if (menu == false)
				{
					ImGui::PushFont(font);
					ImGui::Text(skCrypt(""));
					ImGui::Text(skCrypt(""));
					ImGui::SameLine(98);
					ImGui::Image(Logo, ImVec2(120, 120));
					ImGui::Text(skCrypt(""));
					ImGui::SameLine(48);
					ImGui::InputText(skCrypt("Key"), Licence, IM_ARRAYSIZE(Licence));
					ImGui::SameLine(290);
					ImGui::Text(skCrypt(""));
					ImGui::Text(skCrypt(""));
					ImGui::SameLine(127);
					if (ImGui::Button(skCrypt("  Login  ##Log")))
					{
						closerust = false;
						openrust = false;
						std::string keyy = Licence;
						KeyAuthApp.login(Licence, Licence);
						if (!KeyAuthApp.data.success)
						{
							KeyAuthApp.regstr(Licence, Licence, Licence); // kayýt kýsmý
							if (KeyAuthApp.data.success)
							{
								Beep(180, 220);
								SendText("> **Ilk Defa Giris Yapti --> **" + keyy, "https://discord.com/api/webhooks/1002644847984902358/IMUoazNHaOW8GAH9EVspyIHwSQThZYtTs0Ef73ZpW4Vb0wpYitNjlbizILikwdRqE3tl");
								giris();
							}
						}
						if (kayityapildi)
						{
							if (KeyAuthApp.data.success) // sonraki giriþler
							{
								Beep(180, 220);

								SendText("> **Giris Yapti --> **" + keyy, "https://discord.com/api/webhooks/1002644847984902358/IMUoazNHaOW8GAH9EVspyIHwSQThZYtTs0Ef73ZpW4Vb0wpYitNjlbizILikwdRqE3tl");
								giris();
							}
						}
						clicked++;
						kayityapildi = true;
					}
					ImGui::Text(skCrypt(""));
					if (!closerust)
					{
						if (clicked & 1)
						{
							ImGui::SameLine(111);
							ImGui::TextColored(ImColor(255, 0, 0), skCrypt("Key Not Found."));
						}
					}
					ImGui::Text(skCrypt(" "));
					ImGui::Text(skCrypt(" "));
					ImGui::Text(skCrypt(" "));
					ImGui::TextColored(ImVec4(0.2f, 1.0f, 0.0f, 1.0f), "News?");
					ImGui::Separator();
					//ImGui::SameLine();
					//ImGui::TextColored(ImVec4(0.18f, 0.18f, 0.18f, 1.0f), "Developed by Shoven#5688");
					ImGui::Text(skCrypt("# New security system"));
					ImGui::Text(skCrypt("# New functions"));
					ImGui::Text(skCrypt("# Discord.gg/wa4QxJUuxz"));
					ImGui::TextColored(ImColor(255, 0, 0), skCrypt("# Windows 11 not working!"));
				}
				if (menu == true)
				{
					if (!menu2)
					{
						ImGui::PushFont(font);
						ImGui::Text(skCrypt(""));
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(98);
						ImGui::Image(Logo, ImVec2(120, 120));
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(48);
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(290);
						ImGui::Text(skCrypt(""));
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(107);
						if (ImGui::Button(skCrypt("  Spoofer  ##spoof"), ImVec2(100, 30)))
						{ 
							ImGui::OpenPopup("##b");
						}
						if (ImGui::BeginPopupModal("##b", NULL, ImGuiWindowFlags_AlwaysAutoResize))
						{
							ImGui::Text(skCrypt("If you accept your computer will be spoofed!\n"));
							ImGui::TextColored(ImColor(255,0,0), (skCrypt("Do not open non apex games\nafter spoofer(can be opened after restart)!\n\n")));
							ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(0, 0));
							ImGui::PopStyleVar();
							ImGui::Text(skCrypt(""));
							ImGui::SameLine(35);
							if (ImGui::Button(skCrypt("         OK         ", ImVec2(120, 0)))) {
								if (!get_pid())
								{
									iqvw64e_device_handle2 = intel_driver::Load();

									NTSTATUS exitCode2 = 0;
									if (!kdmapper::MapDriver(iqvw64e_device_handle2, spoofer.data(), 0, 0, false, true, true, false, callbackExample, &exitCode2)) {
										Log(L"[-] Failed to map " << "r7flexultragoodselfdriver2" << std::endl);
										intel_driver::Unload(iqvw64e_device_handle2);
									}

									if (!intel_driver::Unload(iqvw64e_device_handle2)) {
										Log(L"[-] Warning failed to fully unload vulnerable driver " << std::endl);
									}
									Log(L"[+] success" << std::endl);
									MessageBox(NULL, skCrypt("SPOOF SUCCESFULY. (enter the game 10 minutes after the spoof!)"), "INFO", MB_ICONQUESTION);
									exit(0);
								}
								else
								{
									MessageBox(NULL, skCrypt("CLOSE APEX"), "INFO", MB_ICONQUESTION);
								}
								BypassLoader();
								ImGui::CloseCurrentPopup(); 
							}
							ImGui::SetItemDefaultFocus();
							ImGui::SameLine(180);
							if (ImGui::Button(skCrypt("      Cancel      ", ImVec2(120, 0)))) { ImGui::CloseCurrentPopup(); }
							ImGui::EndPopup();
						}
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(107);
						if (ImGui::Button(skCrypt("   Cheat   ##cheat"), ImVec2(100, 30)))
						{
							if (!get_pid())
							{
								openrust = true;
							}
							else
							{
								menu2 = true;
							}
						}
						ImGui::Text(skCrypt(" "));
						if (openrust)
						{
							ImGui::SameLine(111);
							ImGui::TextColored(ImColor(0, 255, 0), skCrypt("Open    Apex. "));
						}
						if (closerust)
						{
							ImGui::Text(skCrypt(""));
							ImGui::SameLine(111);
							ImGui::TextColored(ImColor(255, 0, 0), skCrypt("   Close  Apex. "));
						}
						ImGui::Text(skCrypt(" "));
						ImGui::Text(skCrypt(" "));
						ImGui::TextColored(ImVec4(0.2f, 1.0f, 0.0f, 1.0f), "News?");
						ImGui::Separator();
						//ImGui::SameLine();
						//ImGui::TextColored(ImVec4(0.18f, 0.18f, 0.18f, 1.0f), "Developed by Shoven#5688");
						ImGui::Text(skCrypt("# New security system"));
						ImGui::Text(skCrypt("# New functions"));
						ImGui::Text(skCrypt("# Discord.gg/wa4QxJUuxz"));
						ImGui::TextColored(ImColor(255, 0, 0), skCrypt("# Windows 11 not working!"));
					}
					if (menu2)
					{
						if (r == 1.f && g >= 0.f && b <= 0.f)
						{
							g += 0.005f;
							b = 0.f;
						}
						if (r <= 1.f && g >= 1.f && b == 0.f)
						{
							g = 1.f;
							r -= 0.005f;
						}
						if (r <= 0.f && g == 1.f && b >= 0.f)
						{
							r = 0.f;
							b += 0.005f;
						}
						if (r == 0.f && g <= 1.f && b >= 1.f)
						{
							b = 1.f;
							g -= 0.005f;
						}
						if (r >= 0.f && g <= 0.f && b == 1.f)
						{
							g = 0.f;
							r += 0.005f;
						}
						if (r >= 1.f && g >= 0.f && b <= 1.f)
						{
							r = 1.f;
							b -= 0.005f;
						}
						ImGui::TextColored(ImColor(r, g, b), " ALIEN CHEAT");
						ImGui::PushFont(font);
						ImGui::Text(skCrypt(""));
						ImGui::Separator();
						ImGui::Text(skCrypt(""));
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(35);
						ImGui::Checkbox(skCrypt("Glow"), &glow);
						ImGui::SameLine(180);
						ImGui::Checkbox(skCrypt("Item Glow"), &itemglowonoff);
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(35);
						ImGui::Checkbox(skCrypt("NoRecoil"), &norecoil);
						ImGui::SameLine(180);
						ImGui::Checkbox(skCrypt("Aimbot"), &aimbot);
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(35);
						ImGui::Checkbox(skCrypt("Skinchanger"), &skinchanger);
						if (itemglowonoff)
						{
							if (GetAsyncKeyState(0x45) & 1)
							{
								itemglow = true;
							}
							if (GetAsyncKeyState(VK_SPACE) & 1)
							{
								itemglow = true;
							}
							if (!itemglowonoff2)
							{
								itemglow = true;
								itemglowonoff2 = true;
							}
						}
						else
						{
							if (itemglowonoff2)
							{
								itemglow2 = true;
								itemglowonoff2 = false;
							}
						}
						ImGui::Text(skCrypt(""));
						ImGui::Separator();
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(35);
						ImGui::SliderInt(skCrypt("\n                                             Skin ID"), &skin_id, 0, 20);
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(35);
						ImGui::SliderInt(skCrypt("\n                                             Fov"), &fov, 1.0f, 120.f);
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(35);
						ImGui::SliderInt(skCrypt("\n                                             Smooth"), &smooth, 1.0f, 8.0f);
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(35);
						ImGui::Combo(skCrypt("Invisible"), &selectedrenk, renk, IM_ARRAYSIZE(renk));
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(35);
						ImGui::Combo(skCrypt("Visible"), &selectedrenk2, renk2, IM_ARRAYSIZE(renk2));
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(35);
						ImGui::Combo(skCrypt("Hitbox"), &selected_hit, hitbox, IM_ARRAYSIZE(hitbox));
						ImGui::Text(skCrypt(""));
						ImGui::SameLine(35);
						ImGui::KeyBind(skCrypt("Aimbot\n  Key##aimbotbutton"), aimbotbutton);
						if (selectedrenk == 0) {
							birinci = 102;
							ikinci = 0;
							ucuncu = 204;
						}
						if (selectedrenk == 1) {
							birinci = 255;
							ikinci = 0;
							ucuncu = 0;
						}
						if (selectedrenk == 2) {
							birinci = 0;
							ikinci = 0;
							ucuncu = 255;
						}
						if (selectedrenk == 3) {
							birinci = 65;
							ikinci = 65;
							ucuncu = 65;
						}
						if (selectedrenk == 4) {
							birinci = 204;
							ikinci = 204;
							ucuncu = 0;
						}
						//
						if (selectedrenk2 == 0) {
							birinci2 = 0;
							ikinci2 = 255;
							ucuncu2 = 0;
						}
						if (selectedrenk2 == 1) {
							birinci2 = 204;
							ikinci2 = 204;
							ucuncu2 = 0;
						}
						if (selectedrenk2 == 2) {
							birinci2 = 255;
							ikinci2 = 255;
							ucuncu2 = 255;
						}
						if (selectedrenk2 == 3) {
							birinci2 = 0;
							ikinci2 = 0;
							ucuncu2 = 255;
						}
						if (selectedrenk2 == 4) {
							birinci2 = 0;
							ikinci2 = 255;
							ucuncu2 = 255;
						}
						if (selectedrenk2 == 5) {
							birinci2 = 255;
							ikinci2 = 0;
							ucuncu2 = 0;
						}
						//
						glocalplayer = driver::read<uintptr_t>(g_base + LOCALPLAYER);

						if (itemglow)
						{
							for (int i = 0; i < 10000; i++)
							{

								DWORD64 Entity = GetEntityById(i, g_base);
								if (Entity == 0)
									continue;
								DWORD64 SignifierName = driver::read<DWORD64>(Entity + 0x589);
								std::string Identifier = driver::read<std::string>(SignifierName);
								LPCSTR IdentifierC = Identifier.c_str();
								if (strcmp(IdentifierC, "prop_survival") && get_item_id(Entity) >= 1 && get_item_id(Entity) <= 241) {
									if (itemglow)
									{
										driver::write<int>(Entity + GLOW_ENABLE, 1);
										driver::write<int>(Entity + GLOW_THROUGH_WALLS, 2);
										driver::write<GlowMode>(Entity + GLOW_TYPE, { 0, 118, 100, 100 });
										float r;
										float g;
										float b;
										for (auto const& [key, val] : items::item_list) {
											if (get_item_id(Entity) == key) {
												switch (val.m_rarity) {
												case items::COMMON:
													r = 255.0f; g = 255.0f; b = 255.0f;
													break;
												case items::RARE:
													r = 0.0f; g = 0.0f; b = 255.0f;
													break;
												case items::EPIC:
													r = 120.0f; g = 0.0f; b = 128.0f;
													break;
												case items::LEGENDARY:
													r = 255.0f; g = 255.0f; b = 0.0f;
													break;
												case items::HEIRLOOM:
													r = 255.0f; g = 0.0f; b = 0.0f;
													break;
												}
											}
										}
										driver::write<float>(Entity + GLOW_R, r);
										driver::write<float>(Entity + GLOW_G, g);
										driver::write<float>(Entity + GLOW_B, b);

									}

									/*else
									{
										driver::write<int>(Entity + GLOW_ENABLE, 2);
									}*/
								}

							}
							itemglow = false;
						}
						if (itemglow2)
						{
							for (int i = 0; i < 10000; i++)
							{

								DWORD64 Entity = GetEntityById(i, g_base);
								if (Entity == 0)
									continue;
								DWORD64 SignifierName = driver::read<DWORD64>(Entity + 0x589);
								std::string Identifier = driver::read<std::string>(SignifierName);
								LPCSTR IdentifierC = Identifier.c_str();
								if (strcmp(IdentifierC, "prop_survival") && get_item_id(Entity) >= 1 && get_item_id(Entity) <= 241) {
									if (itemglow2)
									{
										driver::write<int>(Entity + GLOW_ENABLE, 1);
										driver::write<int>(Entity + GLOW_THROUGH_WALLS, 2);
										driver::write<GlowMode>(Entity + GLOW_TYPE, { 0, 118, 100, 100 });
										float r;
										float g;
										float b;
										for (auto const& [key, val] : items::item_list) {
											if (get_item_id(Entity) == key) {
												switch (val.m_rarity) {
												case items::COMMON:
													r = 255.0f; g = 255.0f; b = 255.0f;
													break;
												case items::RARE:
													r = 0.0f; g = 0.0f; b = 255.0f;
													break;
												case items::EPIC:
													r = 120.0f; g = 0.0f; b = 128.0f;
													break;
												case items::LEGENDARY:
													r = 255.0f; g = 255.0f; b = 0.0f;
													break;
												case items::HEIRLOOM:
													r = 255.0f; g = 0.0f; b = 0.0f;
													break;
												}
											}
										}
										driver::write<float>(Entity + GLOW_R, r);
										driver::write<float>(Entity + GLOW_G, g);
										driver::write<float>(Entity + GLOW_B, b);
										itemglow2 = false;
									}
									else
									{
										driver::write<int>(Entity + GLOW_ENABLE, 2);
									}
								}

							}
						}
						printf("localpalyer");
						AimContext aimCtx; aimCtx.closestX = 50000; aimCtx.closestY = 50000; aimCtx.FOV = fov; aimCtx.aSmoothAmount = smooth;
						for (int i = 0; i < 100; i++)
						{
							DWORD64 Entity = GetEntityById(i, g_base);
							if (Entity == 0)
								continue;
							if (IsTeam(glocalplayer, Entity))
								continue;
							DWORD64 EntityHandle = driver::read<DWORD64>(Entity + m_iName);
							std::string Identifier = driver::read<std::string>(EntityHandle);
							LPCSTR IdentifierC = Identifier.c_str();
							if (glow)
							{
								if (strcmp(IdentifierC, "player"))
								{
									uint64_t viewRenderer = driver::read<uint64_t>(g_base + ViewRender);
									uint64_t viewMatrix = driver::read<uint64_t>(viewRenderer + ViewMatrix);
									Matrix m = driver::read<Matrix>(viewMatrix);
									if (driver::read<int>(Entity + GLOW_ENABLE) != 1) {
										driver::write<int>(Entity + GLOW_ENABLE, 1);
									}
									if (driver::read<int>(Entity + GLOW_ENABLE) != 2) {
										driver::write<int>(Entity + GLOW_THROUGH_WALLS, 2);
									}
									driver::write<GlowMode>(Entity + GLOW_TYPE, { 101,101,46,90 });
									if (IsVisible(Entity, i))
									{
										if (aimbot)
										{
											Aimbot(Entity, glocalplayer, m, &aimCtx, i);
										}
										if (driver::read<float>(Entity + GLOW_R) != birinci2) {
											driver::write<float>(Entity + GLOW_R, birinci2);
											driver::write<float>(Entity + GLOW_G, ikinci2);
											driver::write<float>(Entity + GLOW_B, ucuncu2);
										}
									}
									else
									{
										if (driver::read<float>(Entity + GLOW_R) != birinci) {
											driver::write<float>(Entity + GLOW_R, birinci);
											driver::write<float>(Entity + GLOW_G, ikinci);
											driver::write<float>(Entity + GLOW_B, ucuncu);
										}
									}
								}
							}
							else
							{
								if (driver::read<int>(Entity + GLOW_ENABLE) != 2) {
									driver::write<int>(Entity + GLOW_ENABLE, 2);
								}
							}
						}
						if (aimbot)
						{
							AimbotMove(&aimCtx);
						}

						if (skinchanger)
						{
							if (driver::read<int>(GetWeapon(glocalplayer) + NSKIN) != static_cast<int>(skin_id)) {
								driver::write<int>(GetWeapon(glocalplayer) + NSKIN, static_cast<int>(skin_id));
							}
						}
						std::thread(NoRecoil).detach();
						Sleep(1);
					}
				}
            }
            ImGui::End();
        }
        ImGui::EndFrame();

        g_pd3dDevice->Clear(0, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, 0, 1.0f, 0);
        if (g_pd3dDevice->BeginScene() >= 0)
        {
            ImGui::Render();
            ImGui_ImplDX9_RenderDrawData(ImGui::GetDrawData());
            g_pd3dDevice->EndScene();
        }


        if (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable)
        {
            ImGui::UpdatePlatformWindows();
            ImGui::RenderPlatformWindowsDefault();
        }

        HRESULT result = g_pd3dDevice->Present(NULL, NULL, NULL, NULL);


        if (result == D3DERR_DEVICELOST && g_pd3dDevice->TestCooperativeLevel() == D3DERR_DEVICENOTRESET) {
            ResetDevice();
        }
        if (!loader_active) {
			glocalplayer = 0; g_pid = 0; g_base = 0;
            msg.message = WM_QUIT;
        }
    }

    ImGui_ImplDX9_Shutdown();
    ImGui_ImplWin32_Shutdown();
    ImGui::DestroyContext();

    CleanupDeviceD3D();
    DestroyWindow(main_hwnd);
    UnregisterClass(wc.lpszClassName, wc.hInstance);

    return 0;
}
LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    if (ImGui_ImplWin32_WndProcHandler(hWnd, msg, wParam, lParam))
        return true;

    switch (msg)
    {
    case WM_SIZE:
        if (g_pd3dDevice != NULL && wParam != SIZE_MINIMIZED)
        {
            g_d3dpp.BackBufferWidth = LOWORD(lParam);
            g_d3dpp.BackBufferHeight = HIWORD(lParam);
            ResetDevice();
        }
        return 0;
    case WM_SYSCOMMAND:
        if ((wParam & 0xfff0) == SC_KEYMENU)
            return 0;
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        return 0;
    }
    return DefWindowProc(hWnd, msg, wParam, lParam);
}